enum CalendarTypes {
  Meeting
  Appointment
  Birthday
  Travel
  Private
  Task
}

type CalendarGroup {
    id: ID!
    name: String!
    color: String
    members: [Profile!]
}

enum AppointmentRepeat {
    NoRepeat
    Daily
    WorkDays
    Weekly
    Monthly
    Hourly
    Yearly
}

type AppointmentLocation {
    id: ID!
    availablePlaces: Int
    name: String
    suggest: Boolean
}

enum AppointmentType {
    Aquisition
    SigningContract
    Openhouse
    Purchase
    Inspection
    PersonalShowing
}

type AppointmentTerm {
    from: Date
    to: Date
}

enum AppointmentMeetingType {
    ExternalAgreement
    Collegial
    CompleteArgeement
    RedirectAppointment
    FollowUpJob
}

enum AppointmentAddressType {
     LinkedPersonAddress
     NewAcquisitionAddress
}

enum AppointmentState {
    Pencil
    Confirmed
    Completed
    Unconfirmed
}

type Appointment {
    id: ID!
    startDate: Date!
    endDate: Date!
    travelTimeBefore: Int
    travelTimeAfter: Int
    title: String
    allDay: Boolean
    type: CalendarTypes!
    location: String
    taskLabel: TaskLabel
    state: AppointmentState
}

input AppointmentTermInput {
    from: Date
    to: Date
}

input AddAppointmentInput {
    title: String
    alternativeTerms: [AppointmentTermInput!]!
    isAllDay: Boolean
    confirmedDate: Boolean
    repeatAppointment: AppointmentRepeat
    description: String
    appointmentType: AppointmentType!
    assignedPimIds: [String!]
    ExternalAgreement: Boolean
    Collegial: Boolean
    CompleteAgreement: Boolean
    RedirectAppointment: Boolean
    FollowUpJob: Boolean
    invitedPersons: [String!]
    isInsideOffice: Boolean
    location: String
    outsideLocation: String
    travelBeforeAppointment: Int
    travelAfterAppointment: Int
}

input AppointmentSearch {
    startDate: String!
    endDate: String!
    selectedUser: String
    selectedGroup: String
    selectedAppointmentType: AppointmentType
    selectTaskType: [TaskLabel]
}

extend type Mutation {
    addAppointment(input: AddAppointmentInput!): Appointment! @auth
}

extend type Query {
    listCalendar(input: AppointmentSearch!): [Appointment!] @auth
}
