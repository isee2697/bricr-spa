enum NcpPricingType {
  Sale,
  Rent
}

enum NcpCostType {
  Kitchen,
  Tiles,
  Bathroom,
  Service,
  Heating,
  Electricity,
  Water,
  Sewage,
  WaterBoard,
  LandConsolidationInterest,
  HomeownerAssociation,
  OzbUserPart,
  OzbBusinessPart,
  Custom
}

type NcpCost {
  id: ID!
  serviceCostsFrom: AbsoluteFloat
  serviceCostsTill: AbsoluteFloat
  paymentsFrequency: CostPaymentFrequency
  vatTaxedServiceCostsFrom: AbsoluteFloat
  vatTaxedServiceCostsTill: AbsoluteFloat
  vatPercentage: CostVat
  notes: String
  type: String! @uuidOrEnum(enum: ["NcpCostType"])
  name: String
  dateCreated: Date
}

input UpdateNcpCostInput {
  id: ID!
  serviceCostsFrom: AbsoluteFloat
  serviceCostsTill: AbsoluteFloat
  paymentsFrequency: CostPaymentFrequency
  vatTaxedServiceCostsFrom: AbsoluteFloat
  vatTaxedServiceCostsTill: AbsoluteFloat
  vatPercentage: CostVat
  notes: String
  name: String
}

input UpdateNcpCostsDetailsInput {
  id: ID!
  description: String
}

input NcpSaleInformationsInput {
  minPrice: AbsoluteFloat
  maxPrice: AbsoluteFloat
  calculateAutomatically: Boolean
}

type NcpSaleInformations {
  minPrice: AbsoluteFloat
  maxPrice: AbsoluteFloat
  isEnabled: Boolean
  calculateAutomatically: Boolean
}

input NcpRentInformationsInput {
  minPrice: AbsoluteFloat
  maxPrice: AbsoluteFloat
  calculateAutomatically: Boolean
}

type NcpRentInformations {
  minPrice: AbsoluteFloat
  maxPrice: AbsoluteFloat
  isEnabled: Boolean
  calculateAutomatically: Boolean
}

type CostsDetails implements LastUpdated {
  description: String
  dateUpdated: Date
  lastEditedBy: Profile
}

type NcpPrices {
  id: ID!
  pricing: NcpPricing
  costs: [NcpCost!]
  costsDetails: CostsDetails
  interests: Interests
}

type NcpCosts implements LastUpdated {
  costs: [NcpCost!]
  description: String
  lastEditedBy: Profile
  dateUpdated: Date
}

type NcpPricesResult {
  id: ID!
  pricing: NcpPricing
  costs: NcpCosts
  interests: Interests
}

input InterestsInput {
  id: ID!
  groundInterest: AbsoluteFloat
  buildingInterest: AbsoluteFloat
  rentedagen: AbsoluteFloat
  suspensiveCondition: String
  description: String
}

type Interests implements LastUpdated {
  groundInterest: AbsoluteFloat
  buildingInterest: AbsoluteFloat
  rentedagen: AbsoluteFloat
  suspensiveCondition: String
  description: String
  dateCreated: Date
  dateUpdated: Date
  lastEditedBy: Profile
}

input ToggleNcpPricingInput {
  id: ID!
  isRent: Boolean!
  isSale: Boolean!
}

input UpdateNcpPricingInput {
  id: ID!
  rent: NcpRentInformationsInput
  sale: NcpSaleInformationsInput
  description: String
}


type NcpPricing implements LastUpdated {
  rent: NcpRentInformations
  sale: NcpSaleInformations
  lastEditedBy: Profile
  dateUpdated: Date
  description: String
}

extend type Mutation {
  toggleNcpPricing(input: ToggleNcpPricingInput!): NcpPricesResult! @auth
  updateNcpPricing(input: UpdateNcpPricingInput!): NcpPricesResult! @auth
  addNcpCost(input: AddCostInput!): NcpPricesResult! @auth
  updateNcpCost(input: UpdateNcpCostInput!): NcpPricesResult! @auth
  updateNcpInterests(input: InterestsInput!): NcpPricesResult! @auth
  updateNcpCostsDetails(input: UpdateNcpCostsDetailsInput!): NcpPricesResult! @auth
}

extend type Query {
  getNcpPrices(id: ID!): NcpPricesResult! @auth
}
