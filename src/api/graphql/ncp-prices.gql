type NcpPrices {
  id: ID!
  pricing: CommonPricing
  costs: [CommonCost!]
  costsDetails: CostsDetails
  interests: Interests
}


type NcpPricesResult {
  id: ID!
  pricing: CommonPricing
  costs: CommonCosts
  interests: Interests
}

input InterestsInput {
  id: ID!
  groundInterest: AbsoluteFloat
  buildingInterest: AbsoluteFloat
  rentedagen: AbsoluteFloat
  suspensiveCondition: String
  description: String
}

type Interests implements LastUpdated {
  groundInterest: AbsoluteFloat
  buildingInterest: AbsoluteFloat
  rentedagen: AbsoluteFloat
  suspensiveCondition: String
  description: String
  dateCreated: Date
  dateUpdated: Date
  lastEditedBy: LastUpdatedProfile
}


extend type Mutation {
  toggleNcpPricing(input: ToggleCommonPricingInput!): NcpPricesResult! @auth
  updateNcpPricing(input: UpdateCommonPricingInput!): NcpPricesResult! @auth
  addNcpCost(input: AddCommonCostInput!): NcpPricesResult! @auth
  updateNcpCost(input: UpdateCommonCostInput!): NcpPricesResult! @auth
  updateNcpInterests(input: InterestsInput!): NcpPricesResult! @auth
  updateNcpCostsDetails(input: UpdateCommonCostsDetailsInput!): NcpPricesResult! @auth
}

extend type Query {
  getNcpPrices(id: ID!): NcpPricesResult! @auth
}
