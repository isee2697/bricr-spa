enum TaskLabel {
  FollowUp
  Business
  Private
}

enum TaskPriority {
  High
  Medium
  Low
}

enum TaskStatus {
  ToDo
  InProgress
  Blocked
  Done
}

type Task {
  id: ID!
  taskIndex: Int!
  title: String!
  assignee: ID!
  startDate: Date!
  deadline: Date!
  priority: TaskPriority!
  label: TaskLabel!
  status: TaskStatus!
  description: String
}

type TaskFullSummaryResult {
  today: Int!
  nextWeek: Int!
  future: Int!
  overdue: Int!
}

type TaskSummaryByStatusResult {
  todo: Int!
  inProgress: Int!
  blocked: Int!
  done: Int!
}

type TaskSearchResult {
  metadata: SearchMetadata
  items: [Task!]
}

input CreateTaskInput {
  title: String!
  assignee: ID!
  startDate: Date!
  deadline: Date!
  priority: TaskPriority!
  label: TaskLabel!
}

input UpdateTaskInput {
  id: ID!
  title: String
  assignee: ID
  startDate: Date
  deadline: Date
  priority: TaskPriority
  label: TaskLabel
  status: TaskStatus
  description: String
}

input DateRange {
  from: Date
  to: Date
}

input TaskFilters {
  search: String
  assignees: [ID!]
  startDates: [DateRange!]
  deadlines: [DateRange!]
}

input TaskFullSummaryFilters {
  assignees: [ID!]
}

input TaskSummaryByStatusFilters {
  search: String
  assignees: [ID!]
  startDates: [DateRange!]
  deadlines: [DateRange!]
}

extend type Mutation {
  createTask(input: CreateTaskInput!): Task! @auth
  updateTask(input: UpdateTaskInput!): Task @auth
}

extend type Query {
  getTask(id: ID!): Task @auth
  getTasks(filters: TaskFilters, sort: [Sort!]): TaskSearchResult @auth
  getTasksFullSummary(filters: TaskFullSummaryFilters): TaskFullSummaryResult @auth
  getTasksSummaryByStatus(filters: TaskSummaryByStatusFilters): TaskSummaryByStatusResult @auth
}
