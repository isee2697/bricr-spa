# REST - don't remove

input LoginInput {
  username: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

input ForgotPasswordInput {
  username: String!
}

type ForgotPasswordResponse {
  error: String
  stack: String
}

input ResetPasswordInput {
  newPassword: String!
}

type ResetPasswordResponse {
  error: String
  stack: String
}

# END REST

directive @auth on FIELD_DEFINITION
directive @uuidOrEnum(
  enum: String!
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
scalar AbsoluteFloat

input AddCadastreInput {
  pimId: String!
  type: CadastreType!
  description: String
}

input AddCadastreMapsInput {
  pimId: String!
  maps: [NewCadastreMapInput!]!
}

input AddCostInput {
  id: ID!
  type: CostType!
  name: String
}

input AddFilesInput {
  fileIDs: [ID!]!
  entity: EntityWithFiles!
  entityID: ID!
}

input AddNewFloorInput {
  pimId: String!
  floorDescription: String
  floorType: FloorType!
}

input AddOutsideFeatureInput {
  pimId: String!
  type: OutsideFeatureType!
  description: String
}

input AddPricingInput {
  id: ID!
  types: [PricingType!]!
}

input AddSpaceInput {
  spaceType: SpaceType!
  extraRoomPossibility: Boolean!
  pimId: String!
  floorId: String!
  spaceName: String
}

type Approvals {
  label: ApprovalType
  notes: String
}

input ApprovalsInput {
  label: ApprovalType
  notes: String
}

enum ApprovalType {
  AdaptedHome
  EnergyPerformanceAdvice
  PoliceMark
  GeneralHomeApproval
  GiwGuaranteeCertificate
  SwkGuaranteeCertificate
  ArchitecturalInspection
  HouseGuarantee
  HousingGuaranteeCertificate
  FireSafety
  KiwaSafeLiving
  QualityMarkCertificate
}

enum BathroomServices {
  Bidet
  Sauna
  WashingMachineConnection
  Shower
  SteamCabin
  Sink
  CoubleWashbasin
  Toilet
  Washbasin
  WalkInShower
  Urinal
  Whirlpool
  Jacuzzi
  SitzBath
  Bathtub
}

type BathroomSpace {
  constructionYear: Float
  notes: String
  services: [BathroomServices]
  servicesNotes: String
  shape: SpaceShape
  measurement: SpaceMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type BedroomSpace {
  constructionYear: Float
  notes: String
  shape: SpaceShape
  measurement: SpaceMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type BoughtOff {
  date: Date
  perpetually: Boolean
  notes: String
}

input BoughtOffInput {
  date: Date
  perpetually: Boolean
  notes: String
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Cadastre {
  id: String!
  description: String
  type: CadastreType!
  maps: [CadastreMap!]
  plot: CadastrePlot
  dateCreated: Date
  dateUpdated: Date
  lastEditedBy: LastEditedBy
}

type CadastreMap {
  id: String!
  mapName: String!
  file: File
  description: String
  type: CadastreMapType
}

enum CadastreMapType {
  Map
  Register
}

type CadastrePlot {
  notes: String
  name: String
  municipalCode: String
  sectionCode: String
  plot: String
  indexNumber: String
  surface: Float
  share: String
  codeSize: CodeSizeType
  ownership: Ownership
  lease: Lease
  boughtOff: BoughtOff
}

input CadastrePlotInput {
  id: String
  notes: String
  name: String
  municipalCode: String
  sectionCode: String
  plot: String
  indexNumber: String
  surface: Float
  share: String
  codeSize: CodeSizeType
  ownership: OwnershipInput
  lease: LeaseInput
  boughtOff: BoughtOffInput
}

enum CadastreType {
  CadastreMap
  Plot
}

input ChangesHistoryFilters {
  entityType: EventEntityType
}

enum CodeSizeType {
  Apartment
  Tightness
  PartLot
  InWholePlot
  MembershipRight
}

type Company {
  id: String!
  teams: [Team!]
  name: String
}

type ConstructionInformation {
  type: ConstructionType
  from: Date
  to: Date
  notes: String
}

input ConstructionInformationInput {
  type: ConstructionType
  from: Date
  to: Date
  notes: String
}

enum ConstructionType {
  UnderConstruction
  InDevelopment
}

type Cost {
  id: ID!
  serviceCosts: AbsoluteFloat
  paymentsFrequency: CostPaymentFrequency
  vatTaxedServiceCosts: AbsoluteFloat
  vatPercentage: CostVat
  notes: String
  type: CostType!
  name: String
}

enum CostPaymentFrequency {
  Monthly
  Yearly
}

type CostResult {
  pim: Pim!
  cost: Cost!
}

enum CostType {
  Service
  Heating
  Electricity
  Water
  Sewage
  WaterBoard
  LandConsolidationInterest
  HomeownerAssociation
  OzbUserPart
  OzbBusinessPart
  Custom
}

scalar CostVat

input CreateFileInput {
  fileName: String!
  fileType: String!
  permission: FilePermission!
  description: String
}

input CreatePimInput {
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  propertyType: PropertyType
  attention: String
}

scalar Date

enum DevelopmentType {
  New
  Existing
}

scalar Dictionary

type Energy {
  label: EnergyType
  energyIndex: String
  endDateEnergyLabel: Date
  EPC: String
  characteristicType: EnergyCharasteristicType
  notes: String
}

enum EnergyCharasteristicType {
  Beng
  NaturalEnergy
  ZeroOnMeter
}

input EnergyInput {
  label: EnergyType
  energyIndex: String
  endDateEnergyLabel: Date
  EPC: String
  characteristicType: EnergyCharasteristicType
  notes: String
}

enum EnergyType {
  A
  A1Plus
  A2Plus
  A3Plus
  A4Plus
  A5Plus
  B
  C
  D
  E
  F
  G
}

enum EntityWithFiles {
  Pim
  Space
  OutsideFeature
  OutsideGeneral
  OutsidePropertyRelated
  RoofInformation
  CadastreMap
}

type Event {
  id: String!
  entityType: EventEntityType!
  relatedEntityId: String
  action: EventAction!
  timestamp: Date!
  data: String
  userId: String
}

enum EventAction {
  Created
  Updated
  Removed
}

enum EventEntityType {
  Pim
}

type File {
  id: ID!
  fileName: String!
  description: String
  status: Int!
  fileType: String!
  permission: FilePermission!
  key: ID!
  createdAt: Date
  signedUrl: String
  url: String
  bucket: String
  entityID: String
  entity: EntityWithFiles
}

enum FilePermission {
  public
  private
}

type Floor {
  id: String!
  floorDescription: String
  level: Int!
  floorType: FloorType!
  spaces: [Space!]
  lastEditedBy: LastEditedBy
  dateUpdated: Date
}

enum FloorType {
  Attic
  Floor
  Basement
  GroundFloor
  Loft
}

union GardenDimensions = RectangleDimensions
type GardenFeature {
  mainGarden: Boolean
  type: GardenType
  notes: String
  quality: GardenQualityType
  location: [Location]
  shape: GardenShapeType
  dimensions: GardenDimensions
  surface: Float
  images: [File!]
}

enum GardenQualityType {
  ToBeConstructed
  BeautifullyConstructed
  Normal
  Neglected
  TakenCareOf
}

enum GardenShapeType {
  Square
  Rectangle
  LShape
  UShape
  TShape
}

enum GardenType {
  Backyard
  PatioOrAtrium
  Place
  AllGroundGarden
  FrontGarden
  SunTerrace
  BackGarden
}

type GeneralInformation {
  qualityInformation: [QualityInformations]
  images: [File!]
  notes: String
}

input GeneralInformationInput {
  qualityInformation: [QualityInformations]
  images: [String]
  notes: String
}

type HomeOfficeSpace {
  constructionYear: Float
  notes: String
  shape: SpaceShape
  measurement: SpaceMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type HouseGeneral {
  availability: PropertyAvailabilityInformation
  construction: ConstructionInformation
  floor: FloorType
  propertyConnection: PropertyConnection
  propertyDetails: PropertyTypeDetailed
}

input HouseGeneralInput {
  availability: PropertyAvailabilityInformationInput
  construction: ConstructionInformationInput
  floor: FloorType
  propertyConnection: PropertyConnection
  propertyDetails: PropertyTypeDetailed
}

type HouseOutside {
  generalInformation: GeneralInformation
  propertyRelated: PropertyRelated
  roofInformation: RoofInformation
  notes: String
}

input HouseOutsideInput {
  id: ID!
  generalInformation: GeneralInformationInput
  propertyRelated: PropertyRelatedInput
  roofInformation: RoofInformationInput
  notes: String
}

type Investment {
  netRentalIncome: AbsoluteFloat
  grossRentalIncome: AbsoluteFloat
  economicRentalValue: AbsoluteFloat
  averageMaturity: AbsoluteFloat
  rentIndexed: Boolean
  splitApartment: Boolean
  averageVacancyPercentage: Float
  numberOfRentableUnits: Float
  amountOfTenants: Int
  remainingTermContacts: Int
  vacancySquareMeters: Int
  notes: String
}

input InvestmentInput {
  id: ID!
  netRentalIncome: AbsoluteFloat
  grossRentalIncome: AbsoluteFloat
  economicRentalValue: AbsoluteFloat
  averageMaturity: AbsoluteFloat
  rentIndexed: Boolean
  splitApartment: Boolean
  averageVacancyPercentage: Float
  numberOfRentableUnits: Float
  amountOfTenants: Int
  remainingTermContacts: Int
  vacancySquareMeters: Int
  notes: String
}

type KitchenAppliance {
  name: KitchenAppliances!
  quantity: Int!
  notes: String
}

enum KitchenAppliances {
  Refrigerator
  Microwave
  Dishwasher
  Oven
  Stove
}

enum KitchenConstruction {
  ClosedKitchen
  EatInKitchen
  HalfOpenKitchen
  OpenKitchen
}

enum KitchenHob {
  GasHob
  InductionHob
  ElectricHob
  CeramicHob
  HalogenHob
}

enum KitchenServices {
  KitchenIsland
  WashIsland
}

type KitchenSpace {
  constructionYear: Float
  notes: String
  type: KitchenType
  constructionType: KitchenConstruction
  services: [KitchenServices]
  servicesNotes: String
  appliances: [KitchenAppliance]
  hob: KitchenHob
  shape: SpaceShape
  measurement: SpaceMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

enum KitchenType {
  MainKitchen
  Scullery
}

scalar LabelProperty

scalar LastEditedBy

type Lease {
  leaseholder: LeaseholderType
  information: LeaseInformationType
  duration: LeaseDurationType
  yearlyPrice: Float
  endDate: Date
}

enum LeaseDurationType {
  Forever
  Temporary
  Constantly
}

enum LeaseholderType {
  Different
  Township
  Private
}

enum LeaseInformationType {
  Virable
  Fixed
}

input LeaseInput {
  leaseholder: LeaseholderType
  information: LeaseInformationType
  duration: LeaseDurationType
  yearlyPrice: Float
  endDate: Date
}

type LinkedPim {
  id: ID!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  propertyType: PropertyType
  attention: String
  plotNumber: Int
  salePrice: AbsoluteFloat
  rentPrice: AbsoluteFloat
  status: PimStatus!
  images: [File!]
}

input LinkedPimInput {
  pimId: ID!
  linkedPimIDs: [ID!]!
}

type ListPim {
  id: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  street: String
  city: String!
  state: String
  county: String
  country: String!
  completeness: Float!
  propertyType: PropertyType
  salePrice: Float
  rentPrice: Float
  images: [File!]
  livingArea: Int
  attention: String
  dateCreated: Date!
  dateUpdated: Date
  lastEditedBy: LastEditedBy
  houseOutside: ListPimHouseOutside
  archived: Boolean
  status: PimStatus!
  developmentType: DevelopmentType!
}

type ListPimHouseOutside {
  propertyRelated: ListPimPropertyRelated
}

type ListPimPropertyRelated {
  items: [PropertyRelatedItems]
}

input ListPimsFilters {
  developmentType: DevelopmentType
  status: PimStatus
  houseNumberPrefix: String
  houseNumber: String
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  street: String
  postalCode: String
  district: String
  city: String
  state: String
  county: String
  country: String
  archived: Boolean
}

type LivingRoomSpace {
  constructionYear: Float
  notes: String
  type: LivingRoomType
  shape: SpaceShape
  measurement: SpaceMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
  stairs: Boolean
}

enum LivingRoomType {
  ThroughRoom
  FormerEnSuite
  RoomAndSuite
  Conservatory
}

enum Location {
  North
  South
  East
  West
}

input NewCadastreMapInput {
  mapName: String!
  fileID: String!
  description: String
  type: CadastreMapType!
}

type ObligationToProvideInformation {
  label: String
  notes: String
}

input ObligationToProvideInformationInput {
  label: String
  notes: String
}

enum ObligationToProvideInformationType {
  Boot
  BWLetter
  SoilPollution
  Asbestos
  OwnSake
}

type OtherSpace {
  name: String
  constructionYear: Float
  notes: String
  shape: SpaceShape
  measurement: SpaceMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type OutsideFeature {
  id: String!
  description: String
  type: OutsideFeatureType!
  configuration: OutsideFeatureConfiguration
  dateCreated: Date
  dateUpdated: Date
  lastEditedBy: LastEditedBy
}

union OutsideFeatureConfiguration = GardenFeature
enum OutsideFeatureType {
  Garden
  Garage
  Storage
  Terrain
  ParkingLot
}

type Ownership {
  stressedInChargeOf: [OwnershipChoiceType]
}

enum OwnershipChoiceType {
  NoneOfThem
  UseAndHabitation
  Usufruct
}

input OwnershipInput {
  stressedInChargeOf: [OwnershipChoiceType]
}

input Pagination {
  from: Int
  limit: Int
  searchAfter: [String!]
}

type Pim {
  id: ID!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  images: [File!]
  livingArea: Int
  propertyType: PropertyType
  attention: String
  completeness: Float!
  archived: Boolean!
  dateCreated: Date!
  houseGeneral: HouseGeneral
  houseOutside: HouseOutside
  outsideFeatures: [OutsideFeature!]
  floors: [Floor!]
  cadastre: [Cadastre!]
  pricing: Pricing
  costs: [Cost!]
  lastEditedBy: LastEditedBy
  dateUpdated: Date
  investment: Investment
  specification: Specification
  linkedProperties: [Pim!]
}

type PimCadastre {
  id: ID!
  cadastre: [Cadastre!]
}

type PimFloor {
  id: String!
  floors: [Floor!]
}

type PimGeneral {
  id: ID!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  images: [File!]
  livingArea: Int
  propertyType: PropertyType
  attention: String
  completeness: Float!
  archived: Boolean!
  dateCreated: Date!
  dateUpdated: Date
  lastEditedBy: LastEditedBy
  houseGeneral: HouseGeneral
}

input PimGeneralInput {
  id: ID!
  realEstateType: RealEstateType
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType
  status: PimStatus
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  attention: String
  houseGeneral: HouseGeneralInput
}

type PimLabel {
  id: ID!
  icon: String
  text: String!
  property: LabelProperty!
}

input PimLabelInput {
  pimId: ID!
  icon: String
  text: String!
  property: LabelProperty!
}

type PimListSearchResult {
  metadata: SearchMetadata
  items: [ListPim!]
}

type PimOutside {
  id: ID!
  houseOutside: HouseOutside
  outsideFeatures: [OutsideFeature!]
  dateUpdated: Date
  lastEditedBy: LastEditedBy
}

scalar PimOutsideInput

type PimPrices {
  id: ID!
  pricing: Pricing
  costs: [Cost!]
  investment: Investment
}

type PimSearchResult {
  metadata: SearchMetadata
  items: [Pim!]
}

type PimSpecification {
  id: ID!
  specification: Specification
  linkedProperties: [LinkedPim!]
}

enum PimStatus {
  Prospect
  Available
  Option
  Bid
  SoldWithReservation
  RentedWithReservation
  Sold
  Rented
}

type PimWithUpdatedSpace {
  newSpace: Space!
  pim: Pim!
}

type Pricing {
  rent: RentInformations
  sale: SaleInformations
}

enum PricingType {
  Sale
  Rent
}

type Profile {
  id: String!
  firstName: String
  lastName: String
  email: String
  avatar: String
  teams: [ProfileTeam!]
}

type ProfileTeam {
  id: String!
  name: String
}

enum PropertyAvailability {
  InConsultation
  Immediatelly
  ByDate
}

type PropertyAvailabilityInformation {
  availability: PropertyAvailability
  from: Date
  notes: String
  habitation: PropertyHabitation
  currentUse: String
  currentDestination: String
}

input PropertyAvailabilityInformationInput {
  availability: PropertyAvailability
  from: Date
  notes: String
  habitation: PropertyHabitation
  currentUse: String
  currentDestination: String
}

enum PropertyConnection {
  SemiDetached
  FinalHouse
  CornerHouse
  TerracedHouse
  DetachedHouse
}

enum PropertyHabitation {
  RecreationalHome
  PermanentOccupation
}

type PropertyRelated {
  items: [PropertyRelatedItems]
  notes: String
  images: [File!]
}

input PropertyRelatedInput {
  items: [PropertyRelatedItems]
  notes: String
  images: [String]
}

enum PropertyRelatedItems {
  Balcony
  Terrace
  RoofTerrace
  Porch
}

enum PropertyType {
  House
  Apartment
  Commercial
  Agricultural
  ParkingLot
  BuildingPlot
  Other
}

enum PropertyTypeDetailed {
  SingleFamily
  DykeHouse
  CourtHouse
  DriveInHome
  SplitLevel
  QuadrantHouse
  PatioHouse
  Villa
  CanalHouse
  WaterHouse
  Bungalow
  SemiBungalow
  StiltHouse
  BusinessOrServiceHome
  Estate
  CountryHouse
  Mansion
}

enum PurchaseMix {
  MgeConstruction
  PartOfIndividualProject
  PurchaseGuarantee
  MixedFormPurchaseRent
}

enum QualityInformations {
  Simple
  Normal
  Luxury
  Excellent
  GoodToStickOut
  Good
  ReasonableToGood
  Fair
  ModerateToFairRedelijik
  Moderate
  BadToModerate
  Bad
}

enum RealEstateType {
  Residential
  Business
}

type RectangleDimensions {
  length: Float
  height: Float
}

enum RentCondition {
  VatTaxed
  ExcludingServiceCosts
  Furnished
  IncludingServiceCosts
  Indexed
}

type RentInformations {
  rentalPrice: AbsoluteFloat
  paymentFrequency: RentPaymentFrequency
  suffix: String
  conditions: [RentCondition!]
  notes: String
}

input RentInformationsInput {
  rentalPrice: AbsoluteFloat
  suffix: String
  conditions: [RentCondition!]
  notes: String
  paymentFrequency: RentPaymentFrequency
}

enum RentPaymentFrequency {
  PerMonth
  Annual
  Custom
}

type RoofInformation {
  type: RoofType
  material: RoofMaterial
  insulation: RoofInsulation
  images: [File!]
}

input RoofInformationInput {
  type: RoofTypeInput
  material: RoofMaterialInput
  insulation: RoofInsulationInput
  images: [String]
}

type RoofInsulation {
  name: RoofInsulations
  notes: String
}

input RoofInsulationInput {
  name: RoofInsulations
  notes: String
}

enum RoofInsulations {
  SprayFoam
  RigidBoards
  BlanketOrMatting
  GlassRock
  MineralWool
  LooseFill
  StructuralPanels
}

type RoofMaterial {
  name: RoofMaterials
  notes: String
}

input RoofMaterialInput {
  name: RoofMaterials
  notes: String
}

enum RoofMaterials {
  Asbestos
  BituminousRoofing
  Plastic
  Slate
  Metal
  Pans
  Other
}

type RoofType {
  name: RoofTypes
  notes: String
}

input RoofTypeInput {
  name: RoofTypes
  notes: String
}

enum RoofTypes {
  TransverseRoof
  ClassRoof
  MansardRoof
  FlatRoof
  HippedRoof
  TentRoof
  SaddleRoof
  CompositeRoof
}

enum SaleCondition {
  VatTaxed
  IncludingVat
  ExcludingConstructionInterest
}

type SaleGeneral {
  prefix: String
  price: AbsoluteFloat
  suffix: String
  executionSale: Boolean
  dateOfExecutionSale: Date
  conditions: [SaleCondition!]
  purchaseMix: [PurchaseMix!]
  notes: String
}

input SaleGeneralInput {
  prefix: String
  price: AbsoluteFloat
  suffix: String
  executionSale: Boolean
  dateOfExecutionSale: Date
  conditions: [SaleCondition!]
  purchaseMix: [PurchaseMix!]
  notes: String
}

type SaleInformations {
  general: SaleGeneral
  woz: SaleWOZ
}

input SaleInformationsInput {
  general: SaleGeneralInput
  woz: SaleWOZInput
}

enum SalePriceSuffix {
  CostsBuyer
  FreeInName
  NoneOfThem
}

type SaleWOZ {
  wozPrice: AbsoluteFloat
  referenceDateWoz: Date
  notes: String
}

input SaleWOZInput {
  wozPrice: AbsoluteFloat
  referenceDateWoz: Date
  notes: String
}

type SearchMetadata {
  total: Int!
}

input Sort {
  column: String!
  direction: SortDirection!
}

enum SortDirection {
  asc
  desc
}

type Space {
  id: String!
  spaceType: SpaceType!
  spaceName: String
  extraRoomPossibility: Boolean!
  configuration: SpaceConfiguration
  lastEditedBy: LastEditedBy
  dateUpdated: Date
}

union SpaceConfiguration =
    KitchenSpace
  | BathroomSpace
  | LivingRoomSpace
  | BedroomSpace
  | HomeOfficeSpace
  | OtherSpace
type SpaceMeasurement {
  length: Float
  width: Float
  height: Float
  surface: Float
  volume: Float
}

enum SpaceServiceHeating {
  GeothermalHeat
  NoHeating
  Fireplace
  MultiBurner
  HotAirHeating
  PelletStove
  ElectricHeating
  DistrictHeating
  GasFireplace
  CoalStove
  WallHeating
  HeatPump
  MotherFireplace
  GasHeaters
  BlockHeatingWoodStove
  CentralHeatingBoiler
  UnderfloorHeatingEntirely
  PossibilityForFireplaceHeat
  UnderfloorHeatingPartly
  RecoveryInstalation
}

enum SpaceShape {
  Rectangle
  Square
  LType
  TType
  UType
  ZType
}

enum SpaceType {
  Kitchen
  Bathroom
  LivingRoom
  Bedroom
  HomeOffice
  Other
}

type Specification {
  energy: Energy
  approvals: Approvals
  obligation: ObligationToProvideInformation
}

input SpecificationInput {
  pimId: ID!
  energy: EnergyInput
  approvals: ApprovalsInput
  obligation: ObligationToProvideInformationInput
}

type Subscription {
  _: Boolean
}

type Team {
  id: String!
  members: [Profile!]
  company: Company!
  name: String
}

input UpdateCadastreInput {
  id: String!
  pimId: String!
  description: String
  plot: CadastrePlotInput
}

input UpdateCadastreMapInput {
  mapId: String
  cadastreId: String
  mapName: String!
  fileID: String
  description: String
  type: CadastreMapType!
}

input UpdateCostInput {
  id: ID!
  serviceCosts: AbsoluteFloat
  paymentsFrequency: CostPaymentFrequency
  vatTaxedServiceCosts: AbsoluteFloat
  vatPercentage: CostVat
  notes: String
  name: String
}

scalar UpdateFeatureInputConfiguration

input UpdateFloorInput {
  pimId: String!
  floorId: String!
  floorDescription: String
  floorType: FloorType
}

input UpdateOutsideFeatureInput {
  pimId: String!
  outsideFeatureId: String!
  feature: UpdateFeatureInputConfiguration
}

input UpdatePricingInput {
  id: ID!
  rent: RentInformationsInput
  sale: SaleInformationsInput
}

input UpdateSpaceInput {
  pimId: String!
  spaceId: String!
  spaceName: String
  space: UpdateSpaceInputConfiguration
}

scalar UpdateSpaceInputConfiguration

scalar Upload

type Query {
  me: Profile @auth
  getProfile(id: ID!): Profile @auth
  listPims(filters: ListPimsFilters, pagination: Pagination, sort: [Sort!]): PimSearchResult! @auth
  getPim(id: ID!): Pim @auth
  getPropertyTypes: [String!]!
  getChangesHistory(filters: ChangesHistoryFilters): [Event!]!
  dictionary: Dictionary
  getPimGeneral(id: ID!): PimGeneral! @auth
  getPimFloors(id: ID!): PimFloor! @auth
  getPimCadastre(id: ID!): PimCadastre! @auth
  getPimOutside(id: ID!): PimOutside! @auth
  getPricing(id: ID!): PimPrices! @auth
  getPimSpecification(id: ID!): PimSpecification! @auth
}

type Mutation {
  #REST don't remove
  login(input: LoginInput): LoginResponse
  forgotPassword(input: ForgotPasswordInput): ForgotPasswordResponse
  resetPassword(input: ResetPasswordInput, token: String!): ResetPasswordResponse
  #END REST

  deleteUser(id: String): String @auth
  createPim(input: CreatePimInput!): Pim @auth
  removePim(id: String!): String @auth
  addFiles(input: AddFilesInput!): [File!]! @auth
  updatePimGeneralInfo(input: PimGeneralInput!): Pim! @auth
  addFloorToPim(input: AddNewFloorInput!): Pim! @auth
  addSpaceToFloor(input: AddSpaceInput!): PimWithUpdatedSpace! @auth
  updateSpace(input: UpdateSpaceInput!): Pim! @auth
  updateFloor(input: UpdateFloorInput!): Pim! @auth
  addCadastreMaps(input: AddCadastreMapsInput!): Pim @auth
  addCadastre(input: AddCadastreInput!): Pim @auth
  updateCadastre(input: UpdateCadastreInput!): Pim @auth
  updatePimOutsideInfo(input: PimOutsideInput!): Pim! @auth
  addOutsideFeature(input: AddOutsideFeatureInput!): Pim! @auth
  updateOutsideFeature(input: UpdateFeatureInputConfiguration!): Pim! @auth
  addPricing(input: AddPricingInput!): Pim! @auth
  updatePricing(input: UpdatePricingInput!): Pim! @auth
  addCost(input: AddCostInput!): CostResult! @auth
  updateCost(input: UpdateCostInput!): CostResult! @auth
  updateInvestment(input: InvestmentInput!): Pim! @auth
  addPimLabel(input: PimLabelInput!): Pim! @auth
  removePimLabel(id: ID!): Pim! @auth
  updateSpecification(input: SpecificationInput!): Pim! @auth
  setLinkedProperties(input: LinkedPimInput!): Pim! @auth
}
