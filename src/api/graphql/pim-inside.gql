enum SpaceServiceHeating {
  GeothermalHeat,
  NoHeating,
  Fireplace,
  MultiBurner,
  HotAirHeating,
  PelletStove,
  ElectricHeating,
  DistrictHeating,
  GasFireplace,
  CoalStove,
  WallHeating,
  HeatPump,
  MotherFireplace,
  GasHeaters,
  BlockHeatingWoodStove,
  CentralHeatingBoiler,
  UnderfloorHeatingEntirely,
  PossibilityForFireplaceHeat,
  UnderfloorHeatingPartly,
  RecoveryInstalation
}

enum WindowType {
  FloatGlass,
  SafetyLaminatedGlass,
  ObscuredGlass,
  AnnealedGlass,
  TintedGlass,
  TemperedGlass,
  InsulatedGlass,
  MirroredGlass,
  LowEglass,
  WiredGlass,
  HeatStrengthenedGlass
}

enum KitchenType {
  MainKitchen,
  Scullery
}

enum LivingRoomType {
  ThroughRoom,
  FormerEnSuite,
  RoomAndSuite,
  Conservatory
}

enum KitchenAppliances {
  Refrigerator,
  Microwave,
  Dishwasher,
  Oven,
  Stove
}

enum KitchenHob {
  GasHob,
  InductionHob,
  ElectricHob,
  CeramicHob,
  HalogenHob
}

enum KitchenServices {
  KitchenIsland,
  WashIsland
}

enum BathroomServices {
  Bidet,
  Sauna,
  WashingMachineConnection,
  Shower,
  SteamCabin,
  Sink,
  CoubleWashbasin,
  Toilet,
  Washbasin,
  WalkInShower,
  Urinal,
  Whirlpool,
  Jacuzzi,
  SitzBath,
  Bathtub,
}

type KitchenAppliance {
  name: KitchenAppliances!,
  quantity: Int!,
  notes: String
}

enum KitchenConstruction {
  ClosedKitchen,
  EatInKitchen,
  HalfOpenKitchen,
  OpenKitchen
}

type RectangleMeasurement {
  length: Float
  width: Float
  surface: Float
}

type CuboidMeasurement {
  length: Float,
  width: Float,
  height: Float,
  surface: Float,
  volume: Float
}

enum FloorType {
  Attic,
  Floor,
  Basement,
  GroundFloor,
  Loft
}

enum SpaceType {
  Kitchen,
  Bathroom,
  LivingRoom,
  Bedroom,
  HomeOffice,
  Other
}

enum SpaceShape {
  Rectangle,
  Square,
  LType,
  TType,
  UType,
  ZType
}

type KitchenSpace {
  constructionYear: Float
  notes: String
  type: KitchenType
  constructionType: [KitchenConstruction]
  services: [KitchenServices]
  servicesNotes: String
  appliances: [KitchenAppliance]
  hob: KitchenHob
  shape: SpaceShape
  measurement: CuboidMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type BathroomSpace {
  constructionYear: Float
  notes: String
  services: [BathroomServices]
  servicesNotes: String
  shape: SpaceShape
  measurement: CuboidMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type LivingRoomSpace {
  constructionYear: Float
  notes: String
  type: [LivingRoomType]
  shape: SpaceShape
  measurement: CuboidMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
  stairs: Boolean
}

type BedroomSpace {
  constructionYear: Float
  notes: String
  shape: SpaceShape
  measurement: CuboidMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type HomeOfficeSpace {
  constructionYear: Float
  notes: String
  shape: SpaceShape
  measurement: CuboidMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type OtherSpace {
  name: String
  constructionYear: Float
  notes: String
  shape: SpaceShape
  measurement: CuboidMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

type Floor implements LastUpdated {
  id: String!
  floorDescription: String
  level: Int!
  floorType: FloorType!
  spaces: [Space!]
  lastEditedBy: Profile
  dateUpdated: Date
  dateCreated: Date
}

union SpaceConfiguration = KitchenSpace | BathroomSpace | LivingRoomSpace | BedroomSpace | HomeOfficeSpace | OtherSpace

type Space {
  id: String!
  spaceType: SpaceType!
  spaceName: String
  extraRoomPossibility: Boolean!
  configuration: SpaceConfiguration
  dateCreated: Date
}

type PimInside implements LastUpdated {
  id: String!
  floors: [Floor!]
  bogSpaces: [BogSpace!]
  insideGeneral: InsideGeneral
  dateUpdated: Date
  lastEditedBy: Profile
}

type PimWithUpdatedSpace {
  newSpace: Space!
  pim: Pim!
}

input AddNewFloorInput {
  pimId: String!
  floorDescription: String
  floorType: FloorType!
}

input AddSpaceInput {
  spaceType: SpaceType!
  extraRoomPossibility: Boolean!
  pimId: String!
  floorId: String!
  spaceName: String
}

scalar UpdateSpaceInputConfiguration

input UpdateSpaceInput {
  pimId: String!
  spaceId: String!
  spaceName: String
  space: UpdateSpaceInputConfiguration
}

input UpdateFloorInput {
  pimId: String!
  floorId: String!
  floorDescription: String
  floorType: FloorType
}

input InsideWindowsInput {
  types: [WindowType!]
  notes: String
}

type InsideWindows {
  types: [WindowType!]
  notes: String
}

input RenovationInput {
  yearOfRenovation: Int
  notes: String
}

type Renovation {
  yearOfRenovation: Int
  notes: String
}

input ExtensionInput {
  yearOfExtension: Int
  notes: String
}

type Extension {
  yearOfExtension: Int
  notes: String
}

input InsideGeneralInput {
  pimId: ID!
  windows: InsideWindowsInput
  extension: ExtensionInput
  renovation: RenovationInput
  notes: String
}

type InsideGeneral implements LastUpdated {
  windows: InsideWindows
  extension: Extension
  renovation: Renovation
  notes: String
  dateUpdated: Date
  lastEditedBy: Profile
}

type PimWithNewFloor {
  newFloor: Floor!
  pim: Pim!
}

extend type Query {
  getPimInside(id: ID!): PimInside! @auth
}

extend type Mutation {
  addFloorToPim(input: AddNewFloorInput!): PimWithNewFloor! @auth
  addSpaceToFloor(input: AddSpaceInput!): PimWithUpdatedSpace! @auth
  updateSpace(input: UpdateSpaceInput!): Pim! @auth
  updateFloor(input: UpdateFloorInput!): Pim! @auth
  updateInsideGeneral(input: InsideGeneralInput!): Pim @auth
}
