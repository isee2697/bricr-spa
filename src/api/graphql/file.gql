enum FilePermission {
  public,
  private
}

enum EntityWithFiles {
  Pim,
  Ncp,
  ObjectType,
  Space,
  BogSpace,
  AogSpace,
  OutsideFeature,
  OutsideGeneral,
  OutsidePropertyRelated,
  RoofInformation,
  CadastreMap,
  MediaPicture,
  NcpMediaPicture,
  ObjectTypeMediaPicture,
  NcpProjectMarketing,
  ObjectTypeProjectMarketing,
  ProjectPhase
}

enum EntityWithMultipleFiles {
  Pim,
  Ncp,
  ObjectType,
  Space,
  BogSpace,
  AogSpace,
  OutsideFeature,
  OutsideGeneral,
  OutsidePropertyRelated,
  RoofInformation,
  NcpProjectMarketing,
  ObjectTypeProjectMarketing
}

input CreateFileInput {
  fileName: String!
  fileType: String!
  permission: FilePermission!
  description: String
}

input AddFilesInput {
  fileIDs: [ID!]!
  entity: EntityWithFiles!
  entityID: ID!
}

input RemoveFilesInput {
  fileIDs: [ID!]!
  entity: EntityWithMultipleFiles!
  entityID: ID!
}

type File {
  id: ID!
  fileName: String!
  description: String
  status: Int!
  fileType: String!
  permission: FilePermission!
  key: ID!
  createdAt: Date
  signedUrl: String
  url: String
  bucket: String
  entityID: String
  entity: EntityWithFiles
}

input InitSendFileInput {
  fileName: String
  fileType: String
  permission: String
  description: String
}

type UploadFileResponse {
  id: String
}

scalar UploadFileInput

scalar PathBuilder

input GetPrivateFileInput {
  key: ID!
  entityID: String
  entity: EntityWithFiles
}

extend type Mutation {
  addFiles(input: AddFilesInput!): [File!]! @auth
  removeFiles(input: RemoveFilesInput!): [File]! @auth
  initSendFile(input: InitSendFileInput!): File!
  uploadFile(input: UploadFileInput!, pathBuilder: PathBuilder): UploadFileResponse
}
