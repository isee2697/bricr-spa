enum MomentGeneralSetting {
  ScheduleOnline,
  DoNotScheduleOnline
}

enum MomentScheduleDay {
  Mon,
  Tue,
  Wed,
  Thu,
  Fri,
  Sat,
  Sun
}

enum TypeOfAppointment {
  Viewing,
  OnlineViewing
}

enum AllocationCriteriaType {
  MatchProfile,
  Allocation
}

enum PropertyPublishedExternally {
  Yes,
  No
}

enum CriteriaOrder {
  JointIncome,
  MinimalAmountOfMissingDocuments,
  NumberOfPreferenceInterest,
  DateOfRegistrationInterest,
  AdditionalWork
}

enum HomeSituation {
  LivingIn,
  OwnerOccupiedHome,
  SocialHousing,
  FreeSectorRentalHome
}

enum TypeOfEmployment {
  IncomeFromEquity,
  SalariedEmployment,
  Entrepreneur,
  Benefits,
  None
}

enum PersonRole {
  Reservation,
  Candidate,
  Optant,
  Tenant
}

type MomentSchedule {
  day: MomentScheduleDay
  startAt: String
  endAt: String
}

input MomentScheduleInput {
  day: MomentScheduleDay
  startAt: String
  endAt: String
}

type ViewingMoment {
  id: ID!
  typeOfAppointment: TypeOfAppointment
  schedules: [MomentSchedule!]
  duration: Int
  travelTimeBefore: Int
  travelTimeAfter: Int
  accountManagersIds: [ID!]
  dateCreated: Date
  accountManagers: [Profile!]
}

input UpdateViewingMomentInput {
  id: ID!
  typeOfAppointment: TypeOfAppointment
  schedules: [MomentScheduleInput!]
  duration: Int
  travelTimeBefore: Int
  travelTimeAfter: Int
  accountManagers: [ID!]
}

input AddViewingMomentInput {
  pimId: ID!
}

input AddAllocationCriteriaInput {
  pimId: ID!
}

input SalesSettingsInput {
  pimId: ID!
  generalSettings: MomentGeneralSetting
  amountOfViewings: Int
  moments: [UpdateViewingMomentInput!]
}

type SalesSettings {
  generalSettings: MomentGeneralSetting
  amountOfViewings: Int
}

type PimSales implements LastUpdated {
  id: ID!
  salesSettings: SalesSettings
  viewingMoments: [ViewingMoment!]
  lastEditedBy: Profile
  dateUpdated: Date
  allocationCriterias: [AllocationCriteria!]
}

type AddViewingMomentResult {
  pim: Pim!
  moment: ViewingMoment!
}

type AddAllocationCriteriaResult {
  pim: Pim!
  criteria: AllocationCriteria!
}

input PersonCapitalInput {
  deductMonthlyObligations: AbsoluteFloat
  availableCapitalCount: AbsoluteFloat
}

type PersonCapital {
  deductMonthlyObligations: AbsoluteFloat
  availableCapitalCount: AbsoluteFloat
}

input AllocationCriteriaInput {
  id: ID!
  description: String
  type: AllocationCriteriaType
  note: String
  startDate: Date
  endDate : Date
  candidatesAssignedPerProperty: Int
  minJointAnnualIncome: AbsoluteFloat
  monthlyRentByMinJointIncome: AbsoluteFloat
  maxJointAnnualIncome: AbsoluteFloat
  monthlyRentByMaxJointIncome: AbsoluteFloat
  publishedExternally: PropertyPublishedExternally
  minNumberPreferenceInterest: Int
  registrationFrom: Date
  registrationTo: Date
  assignOnlyPeopleWithPropertyInterest: Boolean
  acceptedMissingDocuments: Int
  onlyAcceptedDocuments: Boolean
  criteriaOrder: [CriteriaOrder!]!
  lowestIncomePercentage: AbsoluteFloat
  incomeDistributionThreshold: AbsoluteFloat
  fictitiousIncomeCalculation: AbsoluteFloat
  firstPersonFromCouple: PersonCapitalInput
  secondPersonFromCouple: PersonCapitalInput
  minimalAgeFirstPersonCouple: Int
  minimalAgePartner: Int
  homeSituation: [HomeSituation!]
  numberOfAdults: Int
  numberOfChildren: Int
  currentResidence: String
  typeOfEmploymentFirstPersonInCouple: [TypeOfEmployment!]
  typeOfEmploymentSecondPersonInCouple: [TypeOfEmployment!]
  assignToPersonsWithRole: [PersonRole!]
  assignPeopleAboveMaxJointIncome: Boolean
  segmentationProfileIds: [ID!]
}

type AllocationCriteria {
  id: ID!
  description: String
  type: AllocationCriteriaType
  note: String
  startDate: Date
  endDate : Date
  candidatesAssignedPerProperty: Int
  minJointAnnualIncome: AbsoluteFloat
  monthlyRentByMinJointIncome: AbsoluteFloat
  maxJointAnnualIncome: AbsoluteFloat
  monthlyRentByMaxJointIncome: AbsoluteFloat
  publishedExternally: PropertyPublishedExternally
  minNumberPreferenceInterest: Int
  registrationFrom: Date
  registrationTo: Date
  assignOnlyPeopleWithPropertyInterest: Boolean
  acceptedMissingDocuments: Int
  onlyAcceptedDocuments: Boolean
  criteriaOrder: [CriteriaOrder!]!
  lowestIncomePercentage: AbsoluteFloat
  incomeDistributionThreshold: AbsoluteFloat
  fictitiousIncomeCalculation: AbsoluteFloat
  firstPersonFromCouple: PersonCapital
  secondPersonFromCouple: PersonCapital
  minimalAgeFirstPersonCouple: Int
  minimalAgePartner: Int
  homeSituation: [HomeSituation!]
  numberOfAdults: Int
  numberOfChildren: Int
  currentResidence: String
  typeOfEmploymentFirstPersonInCouple: [TypeOfEmployment!]
  typeOfEmploymentSecondPersonInCouple: [TypeOfEmployment!]
  assignToPersonsWithRole: [PersonRole!]
  assignPeopleAboveMaxJointIncome: Boolean
  segmentationProfiles: [Profile!]
  segmentationProfileIds: [String!]
}

extend type Mutation {
  updateSalesSettings(input: SalesSettingsInput!): Pim! @auth
  addViewingMoment(input: AddViewingMomentInput!): AddViewingMomentResult! @auth
  removeViewingMoment(id: ID!): Pim! @auth
  addAllocationCriteria(input: AddAllocationCriteriaInput!): AddAllocationCriteriaResult! @auth
  updateAllocationCriteria(input: AllocationCriteriaInput!): Pim! @auth
  removeAllocationCriteria(id: ID!): Pim! @auth
}

extend type Query {
  getPimSales(id: ID!): PimSales! @auth
}

