enum GenderType {
  Male,
  Female,
  GenderNeutral
}

enum EmailAddressType {
  Business,
  Private
}

type EmailAddress {
  id: String!
  emailAddress: String!
  emailAddressType: EmailAddressType
  isPublic: Boolean
}

input CreateEmailAddressInput {
  profileId: String!
  emailAddress: String!
  emailAddressType: EmailAddressType
  isPublic: Boolean
}

input UpdateEmailAddressInput {
  id: String!
  profileId: String!
  emailAddress: String!
  emailAddressType: EmailAddressType
  isPublic: Boolean
}

enum PhoneNumberType {
  Business,
  Private
}

type PhoneNumber {
  id: String!
  phoneNumber: String!
  phoneNumberType: PhoneNumberType
  isPublic: Boolean
}

input CreatePhoneNumberInput {
  profileId: String!
  phoneNumber: String!
  phoneNumberType: PhoneNumberType
  isPublic: Boolean
}

input UpdatePhoneNumberInput {
  id: String!
  profileId: String!
  phoneNumber: String!
  phoneNumberType: PhoneNumberType
  isPublic: Boolean
}

enum SocialMediaLinkType {
  LinkedIn,
  Twitter,
  Facebook,
  Pinterest,
  Instagram,
  WhatsApp,
  PersonalWebsite
}

type SocialMediaLink {
  id: String!
  socialMediaLink: String!
  socialMediaLinkType: SocialMediaLinkType
  isPublic: Boolean
}

input CreateSocialMediaLinkInput {
  profileId: String!
  socialMediaLink: String!
  socialMediaLinkType: SocialMediaLinkType
  isPublic: Boolean
}

input UpdateSocialMediaLinkInput {
  id: String!
  profileId: String!
  socialMediaLink: String!
  socialMediaLinkType: SocialMediaLinkType
  isPublic: Boolean
}

enum AdminSettings {
  General
  Users
  Teams
  Options
  Workflows
  Matching
  PIM
  CRM
  SALES
  Email
  Documents
  Calendar
  Marketing
  KPITargets
  Notifications
  Tasks
}

type Profile {
  id: ID!
  gender: GenderType
  firstName: String
  lastName: String
  dateOfBirth: Date
  functionDescription: String
  email: String!
  teams: [ProfileTeam!]
  emailAddresses: [EmailAddress!]
  phoneNumbers: [PhoneNumber!]
  socialMediaLinks: [SocialMediaLink!]
  company: Company
  adminSettings: [AdminSettings!]
  isActive: Boolean!
  initials: String
  costUnit: String
  hideOnMemos: Boolean
  isAccountmanager: Boolean
  image: File
}

input CreateProfileInput {
  gender: GenderType
  firstName: String
  lastName: String
  dateOfBirth: Date
  functionDescription: String
  email: String!
  adminSettings: [AdminSettings!]
}

input UpdateProfileInput {
  id: String!
  gender: GenderType
  firstName: String
  lastName: String
  dateOfBirth: Date
  functionDescription: String
  email: String!
  adminSettings: [AdminSettings!]
  initials: String
  costUnit: String
  hideOnMemos: Boolean
  isAccountmanager: Boolean
  imageId: ID
}

type ProfileTeam {
  id: ID!
  name: String
  notes: String
  createPermission: Boolean!
  readPermission: Boolean!
  updatePermission: Boolean!
  deletePermission: Boolean!
}

input CreateCompanyInput {
  name: String!
  email: String!
}

type Company {
  id: ID!
  teams: [Team!]
  users: [Profile!]
  name: String
}

type TeamMember {
  id: ID!
  notes: String
  user: Profile!
  createPermission: Boolean!
  readPermission: Boolean!
  updatePermission: Boolean!
  deletePermission: Boolean!
}

type Team {
  id: ID!
  profileMembers: [TeamMember!]
  company: Company!
  name: String
  description: String
  teamRights: [TeamRight!]
}

type ProfileSearchResult {
  metadata: SearchMetadata
  items: [Profile!]
}
type BillingResult {
  url: String!
}

input ProfileFilters {
    isActive: Boolean
}

extend type Query {
  me: Profile @auth
  getProfile(id: ID!): Profile @auth
  getMyTeamMembers(pagination: Pagination, search: String): ProfileSearchResult! @auth
  getAllProfiles(filters: ProfileFilters, pagination: Pagination, search: String): ProfileSearchResult! @auth
  getBilling: BillingResult! @auth
}

extend type Mutation {
  createCompany(input: CreateCompanyInput!): Company!
  createProfile(input: CreateProfileInput!): Profile! @auth
  updateProfile(input: UpdateProfileInput!): Profile! @auth
  deactivateProfile(id: String!): Profile! @auth
  reactivateProfile(id: String!): Profile! @auth
  createEmailAddress(input: CreateEmailAddressInput!): Profile! @auth
  updateEmailAddress(input: UpdateEmailAddressInput!): Profile! @auth
  createPhoneNumber(input: CreatePhoneNumberInput!): Profile! @auth
  updatePhoneNumber(input: UpdatePhoneNumberInput!): Profile! @auth
  createSocialMediaLink(input: CreateSocialMediaLinkInput!): Profile! @auth
  updateSocialMediaLink(input: UpdateSocialMediaLinkInput!): Profile! @auth
}
