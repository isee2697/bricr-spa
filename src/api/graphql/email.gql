type EmailAndName {
    email: String!
    name: String!
}

input EmailAndNameInput {
    email: String!
    name: String!
}

type EmailFolder {
    id: ID!
    nylasFolderId: ID!
    name: String!
    displayName: String
    userId: ID!
}

type EmailListItem {
    id: ID!
    folder: EmailFolder!
    from: [EmailAndName!]!
    to: [EmailAndName!]!
    subject: String!
    date: Date!
    unread: Boolean
}

type Email {
    id: ID!
    folder: EmailFolder!
    from: [EmailAndName!]!
    to: [EmailAndName!]!
    cc: [EmailAndName!]
    bcc: [EmailAndName!]
    subject: String!
    body: String!
    date: Date!
    unread: Boolean
}

type EmailFolderListItem {
    folder: EmailFolder!
    numberOfUnreadEmails: Int!
}

input SendEmailInput {
    from: [EmailAndNameInput!]!
    to: [EmailAndNameInput!]!
    cc: [EmailAndNameInput!]
    bcc: [EmailAndNameInput!]
    subject: String!
    body: String!
}

input UpdateEmailInput {
    id: ID!
    unread: Boolean
}

extend type Mutation {
    sendEmail(accountId: String!, input: SendEmailInput!): Boolean! @auth
    updateEmail(input: UpdateEmailInput!): Email @auth
}

extend type Query {
    listEmailFolders(accountId: String!): [EmailFolderListItem!] @auth
    listEmail(accountId: String!, folderId: ID!): [EmailListItem!] @auth
    getEmail(accountId: String!, emailId: String!): Email @auth
}
