enum BogSpaceType {
  BusinessSpace,
  OfficeSpace,
  RetailSpace,
  Leisure,
  HorecaSpace,
  SocialRealEstateSpace,
  Terrain,
  Storage
}

enum AirTreatmentType {
  AirCondition,
  MechanicalVentilation,
  TopCooling
}

enum SocialRealEstateSpecificationType {
  PracticeSpace,
  RedesignationPossible,
  HousingAvailable,
  ReturnServices
}

enum SocialRealEstateServicesType {
  SanitaryShared,
  SanitaryIndividually,
  Elevator,
  Swimmingpool,
  Daycare,
  PrivateParkingFacilities,
  OutdoorSpaceAvailable
  OutOfSchoolChildcare
  FireAlarmSystem
}

enum HorecaSpecificationType {
  TakeoverPersonnel,
  CateringArea,
  ResidentialObjectAvailable,
  Terrace,
  Luxery
}

enum OfficeServicesType {
  CableTrays,
  Skylights,
  Pantry,
  Heating,
  SuspendedCeiling,
  Sprinkler,
  PowerFlow,
  OverheadDoors,
  Toilet,
  RecessedLuminaires,
  Elevators,
  OpenableWindows,
  RoomLayout,
  FlexDesk
}

enum BusinessServicesType {
  ConcreteFloor,
  Skylights,
  Pantry,
  Heating,
  LoadingDocks,
  Sprinkler,
  PowerFlow,
  OverheadDoors,
  Toilet,
  RecessedLuminaires,
  Elevators,
  OpenableWindows
}

enum LeisureSpecificationType {
  TakeoverPersonnel,
  AnnualPitches,
  ResidentialObjectAvailable,
  ReturnServices,
}

enum RetailSpecificationType {
  TakeoverPersonnel,
  CateringAllowed,
  IndustryLimitation,
  PublicOrientedServices,
  Retail,
  Showroom
}

enum LeisureServicesType {
  Electric,
  Reception,
  SanitaryBlocks,
  SwimmingPool,
  SewageSystem,
  CateringAvailable,
  CampShop
}

enum TerrainSpecificationsType {
  Fenced,
  Lockable
}

enum WealthClassType {
  A1,
  A2,
  B1,
  B2,
  C1,
  C2
}

enum TermsOfCostsType {
  Monthly,
  Yearly
}

enum CommonRoomsType {
  Canteen,
  Pantry,
  Kitchen,
  FrontDesk,
  Sanitary,
  ConferenceRoom
}

enum HorecaType {
  Snackbar,
  ConferenceRoomCenter,
  Restaurant,
  Bistro,
  Disco,
  Hotel,
  Cafe,
  EatCafe,
  PancakeHouse,
  Cafeteria,
  Restaria,
  Lunchroom,
  FastFood,
  RoadHouse,
  IceCreamParlour,
  SandwichShop
}

enum LegalFormType {
  BV,
  CV,
  Cooperation,
  Proprietorship,
  Partnership,
  NV,
  VOF,
  Foundation,
  Association
}

enum SocialRealEstateSpaceType {
  Cultural
  Education
  Religious
  Sport
  Care
}

enum DestinationType {
  Socially
  Living
}

enum TypeOfPavement {
  Asphalt,
  ClinkerBricks,
  StelconPlates,
  FloorTiles
}

enum TypeOfStorage {
  StorageRoom,
  StorageArea
}

type RetailMeasurements {
  surface: AbsoluteFloat
  salesFloorArea: AbsoluteFloat
  frontWidth: AbsoluteFloat
  inUnitsFrom: AbsoluteFloat
  amountOfFloors: Int
}

input RetailMeasurementsInput {
  surface: AbsoluteFloat
  salesFloorArea: AbsoluteFloat
  frontWidth: AbsoluteFloat
  inUnitsFrom: AbsoluteFloat
  amountOfFloors: Int
}

type LeisureMeasurements {
  surface: AbsoluteFloat
  numberOfPitches: Int
  numberOfStays: Int
  capacityOfPersons: Int
}

input LeisureMeasurementsInput {
  surface: AbsoluteFloat
  numberOfPitches: Int
  numberOfStays: Int
  capacityOfPersons: Int
}

type HorecaMeasurements {
  surface: AbsoluteFloat
  salesFloorArea: AbsoluteFloat
  amountOfFloors: Int
  amountOfRooms: Int
  currentNumberOfSeats: Int
  housingArea: AbsoluteFloat
}

input HorecaMeasurementsInput {
  surface: AbsoluteFloat
  salesFloorArea: AbsoluteFloat
  amountOfFloors: Int
  amountOfRooms: Int
  currentNumberOfSeats: Int
  housingArea: AbsoluteFloat
}

type BusinessSpaceMeasurements {
  surface: AbsoluteFloat
  freeHeight: AbsoluteFloat
  freeSpan: AbsoluteFloat
  floorLoad: AbsoluteFloat
  inUnitsFrom: AbsoluteFloat
  amountOfFloors: Int
}

input BusinessSpaceMeasurementsInput {
  surface: AbsoluteFloat
  freeHeight: AbsoluteFloat
  freeSpan: AbsoluteFloat
  floorLoad: AbsoluteFloat
  inUnitsFrom: AbsoluteFloat
  amountOfFloors: Int
}

type OfficeSpaceMeasurements {
  length: AbsoluteFloat
  width: AbsoluteFloat
  height: AbsoluteFloat
  surface: AbsoluteFloat
  volume: AbsoluteFloat
  measurementsCertificateAvailable: Boolean
  inUnitsFrom: AbsoluteFloat
  amountOfFloors: Int
}

input OfficeSpaceMeasurementsInput {
  length: AbsoluteFloat
  width: AbsoluteFloat
  height: AbsoluteFloat
  surface: AbsoluteFloat
  volume: AbsoluteFloat
  measurementsCertificateAvailable: Boolean
  inUnitsFrom: AbsoluteFloat
  amountOfFloors: Int
}

type StorageMeasurements {
  length: AbsoluteFloat
  width: AbsoluteFloat
  height: AbsoluteFloat
  surface: AbsoluteFloat
  volume: AbsoluteFloat
}

input StorageMeasurementsInput {
  length: AbsoluteFloat
  width: AbsoluteFloat
  height: AbsoluteFloat
  surface: AbsoluteFloat
  volume: AbsoluteFloat
}

type SocialRealEstateSpaceMeasurements {
  surface: AbsoluteFloat
  numberOfCareUnits: Int
  numberOfSeats: Int
}

input SocialRealEstateSpaceMeasurementsInput {
  surface: AbsoluteFloat
  numberOfCareUnits: Int
  numberOfSeats: Int
}

type GoodWillPrices {
  priceInventoryGoodwill: AbsoluteFloat
  vatRate: AbsoluteFloat
  priceInventoryGoodwillVat: AbsoluteFloat
  priceInventoryGoodwillIncludedVat: AbsoluteFloat
  notes: String
}

input GoodWillPricesInput {
  priceInventoryGoodwill: AbsoluteFloat
  vatRate: AbsoluteFloat
  priceInventoryGoodwillVat: AbsoluteFloat
  priceInventoryGoodwillIncludedVat: AbsoluteFloat
  notes: String
}

type HorecaPrices {
  priceInventoryGoodwill: AbsoluteFloat
  vatRate: AbsoluteFloat
  priceInventoryGoodwillVat: AbsoluteFloat
  priceInventoryGoodwillIncludedVat: AbsoluteFloat
  revenueLastFiscalYear: AbsoluteFloat
  rentalIncomeHomeYear: AbsoluteFloat
  notes: String
}

input HorecaPricesInput {
  priceInventoryGoodwill: AbsoluteFloat
  vatRate: AbsoluteFloat
  priceInventoryGoodwillVat: AbsoluteFloat
  priceInventoryGoodwillIncludedVat: AbsoluteFloat
  revenueLastFiscalYear: AbsoluteFloat
  rentalIncomeHomeYear: AbsoluteFloat
  notes: String
}

type BogPrices {
  price: AbsoluteFloat
  vatRate: AbsoluteFloat
  priceVat: AbsoluteFloat
  priceIncVat: AbsoluteFloat
}

input BogPricesInput {
  price: AbsoluteFloat
  vatRate: AbsoluteFloat
  priceVat: AbsoluteFloat
  priceIncVat: AbsoluteFloat
}

type SocialRealEstateSpacePrices {
  vatRate: AbsoluteFloat
  notes: String
}

input SocialRealEstateSpacePricesInput {
  vatRate: AbsoluteFloat
  notes: String
}

type RetailerAssociationContribution {
  contribution: AbsoluteFloat
  termsOfCosts: String @uuidOrEnum(enum: ["TermsOfCostsType"])
  vatPercentage: AbsoluteFloat
  vatTaxedContribution: AbsoluteFloat
  notes: String
}

input RetailerAssociationContributionInput {
  contribution: AbsoluteFloat
  termsOfCosts: String @uuidOrEnum(enum: ["TermsOfCostsType"])
  vatPercentage: AbsoluteFloat
  vatTaxedContribution: AbsoluteFloat
  notes: String
}

type TerrainSpecifications {
  surface: AbsoluteFloat
  buildingHeightTerrain: AbsoluteFloat
  extensionTerrainPercent: AbsoluteFloat
  extensionTerrainM2: AbsoluteFloat
  pavedPercentage: AbsoluteFloat
}

input TerrainSpecificationsInput {
  surface: AbsoluteFloat
  buildingHeightTerrain: AbsoluteFloat
  extensionTerrainPercent: AbsoluteFloat
  extensionTerrainM2: AbsoluteFloat
  pavedPercentage: AbsoluteFloat
}

type RetailSpace {
  measurements: RetailMeasurements
  airTreatment: [String!] @uuidOrEnum(enum: ["AirTreatmentType"])
  specifications: [String!] @uuidOrEnum(enum: ["RetailSpecificationType"])
  prices: GoodWillPrices
  wealthClass: String @uuidOrEnum(enum: ["WealthClassType"])
  retailerAssociationContribution: RetailerAssociationContribution
  commonRooms: [String!] @uuidOrEnum(enum: ["CommonRoomsType"])
}

input RetailSpaceInput {
  measurements: RetailMeasurementsInput
  airTreatment: [String!] @uuidOrEnum(enum: ["AirTreatmentType"])
  specifications: [String!] @uuidOrEnum(enum: ["RetailSpecificationType"])
  prices: GoodWillPricesInput
  wealthClass: String @uuidOrEnum(enum: ["WealthClassType"])
  retailerAssociationContribution: RetailerAssociationContributionInput
  commonRooms: [String!] @uuidOrEnum(enum: ["CommonRoomsType"])
}

type LeisureSpace {
  measurements: LeisureMeasurements
  specifications: [String!] @uuidOrEnum(enum: ["LeisureSpecificationType"])
  prices: GoodWillPrices
  services: [String!] @uuidOrEnum(enum: ["LeisureServicesType"])
}

input LeisureSpaceInput {
  measurements: LeisureMeasurementsInput
  specifications: [String!] @uuidOrEnum(enum: ["LeisureSpecificationType"])
  prices: GoodWillPricesInput
  services: [String!] @uuidOrEnum(enum: ["LeisureServicesType"])
}

type HorecaSpace {
  measurements: HorecaMeasurements
  type: [String!] @uuidOrEnum(enum: ["HorecaType"])
  notes: String
  specifications: [String!] @uuidOrEnum(enum: ["HorecaSpecificationType"])
  prices: HorecaPrices
  wealthClass: String @uuidOrEnum(enum: ["WealthClassType"])
  legalForm: String @uuidOrEnum(enum: ["LegalFormType"])
}

input HorecaSpaceInput {
  measurements: HorecaMeasurementsInput
  type: [String!] @uuidOrEnum(enum: ["HorecaType"])
  notes: String
  specifications: [String!] @uuidOrEnum(enum: ["HorecaSpecificationType"])
  prices: HorecaPricesInput
  wealthClass: String @uuidOrEnum(enum: ["WealthClassType"])
  legalForm: String @uuidOrEnum(enum: ["LegalFormType"])
}

type BusinessSpace {
  measurements: BusinessSpaceMeasurements
  airTreatment: [String!] @uuidOrEnum(enum: ["AirTreatmentType"])
  services: [String!] @uuidOrEnum(enum: ["BusinessServicesType"])
  prices: BogPrices
}

input BusinessSpaceInput {
  measurements: BusinessSpaceMeasurementsInput
  airTreatment: [String!] @uuidOrEnum(enum: ["AirTreatmentType"])
  services: [String!] @uuidOrEnum(enum: ["BusinessServicesType"])
  prices: BogPricesInput
}

type OfficeSpace {
  measurements: OfficeSpaceMeasurements
  airTreatment: [String!] @uuidOrEnum(enum: ["AirTreatmentType"])
  services: [String!] @uuidOrEnum(enum: ["OfficeServicesType"])
  prices: BogPrices
  turnKey: Boolean
  commonRooms: [String!] @uuidOrEnum(enum: ["CommonRoomsType"])
}

input OfficeSpaceInput {
  measurements: OfficeSpaceMeasurementsInput
  airTreatment: [String!] @uuidOrEnum(enum: ["AirTreatmentType"])
  services: [String!] @uuidOrEnum(enum: ["OfficeServicesType"])
  prices: BogPricesInput
  turnKey: Boolean
  commonRooms: [String!] @uuidOrEnum(enum: ["CommonRoomsType"])
}

type SocialRealEstateSpace {
  measurements: SocialRealEstateSpaceMeasurements
  type: String @uuidOrEnum(enum: ["SocialRealEstateSpaceType"])
  notesAboutType: String
  destinationType: [String!] @uuidOrEnum(enum: ["DestinationType"])
  specifications: [String!] @uuidOrEnum(enum: ["SocialRealEstateSpecificationType"])
  services: [String!] @uuidOrEnum(enum: ["SocialRealEstateServicesType"])
  prices: SocialRealEstateSpacePrices
}

input SocialRealEstateSpaceInput {
  measurements: SocialRealEstateSpaceMeasurementsInput
  type: String @uuidOrEnum(enum: ["SocialRealEstateSpaceType"])
  notesAboutType: String
  destinationType: [String!] @uuidOrEnum(enum: ["DestinationType"])
  specifications: [String!] @uuidOrEnum(enum: ["SocialRealEstateSpecificationType"])
  services: [String!] @uuidOrEnum(enum: ["SocialRealEstateServicesType"])
  prices: SocialRealEstateSpacePricesInput
}

type Terrain {
  terrainSpecifications: TerrainSpecifications
  specifications: [String!] @uuidOrEnum(enum: ["TerrainSpecificationType"])
  typeOfPavement: [String!] @uuidOrEnum(enum: ["TypeOfPavement"])
  prices: BogPrices
}

input TerrainInput {
  terrainSpecifications: TerrainSpecificationsInput
  specifications: [String!] @uuidOrEnum(enum: ["TerrainSpecificationType"])
  typeOfPavement: [String!] @uuidOrEnum(enum: ["TypeOfPavement"])
  prices: BogPricesInput
}

type Storage {
  measurements: StorageMeasurements
  type: String @uuidOrEnum(enum: ["TypeOfStorage"])
  notes: String
}

input StorageInput {
  measurements: StorageMeasurementsInput
  type: String @uuidOrEnum(enum: ["TypeOfStorage"])
  notes: String
}

type BogSpace implements LastUpdated {
  id: ID!
  type: BogSpaceType!
  name: String
  notes: String
  description: String
  retailSpaceConfiguration: RetailSpace
  leisureSpaceConfiguration: LeisureSpace
  horecaSpaceConfiguration: HorecaSpace
  businessSpaceConfiguration: BusinessSpace
  officeSpaceConfiguration: OfficeSpace
  socialRealEstateSpaceConfiguration: SocialRealEstateSpace
  terrainConfiguration: Terrain
  storageConfiguration: Storage
  images: [File!]
  dateUpdated: Date
  lastEditedBy: Profile
  dateCreated: Date
}

input UpdateBogSpaceInput {
  pimId: ID!
  spaceId: ID!
  spaceName: String
  notes: String
  description: String
  retailSpaceConfiguration: RetailSpaceInput
  leisureSpaceConfiguration: LeisureSpaceInput
  horecaSpaceConfiguration: HorecaSpaceInput
  businessSpaceConfiguration: BusinessSpaceInput
  officeSpaceConfiguration: OfficeSpaceInput
  socialRealEstateSpaceConfiguration: SocialRealEstateSpaceInput
  terrainConfiguration: TerrainInput
  storageConfiguration: StorageInput
}

input AddBogSpaceInput {
  id: ID!
  type: BogSpaceType!
  name: String
}

type PimWithNewBogSpace {
  newSpace: BogSpace!
  pim: Pim!
}

extend type Mutation {
  addBogSpace(input: AddBogSpaceInput!): PimWithNewBogSpace! @auth
  updateBogSpace(input: UpdateBogSpaceInput!): BogSpace! @auth
}