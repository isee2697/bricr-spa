
enum CadastreMapType {
  Map,
  Register,
}

enum CodeSizeType {
  Apartment,
  Tightness,
  PartLot,
  InWholePlot,
  MembershipRight
}

enum LeaseholderType {
  Different,
  Township,
  Private
}

enum CadastreType {
  CadastreMap,
  Plot
}

enum LeaseInformationType {
  Virable,
  Fixed
}

enum LeaseDurationType {
  Forever,
  Temporary,
  Constantly
}

enum CadastreOwnershipType {
  PerpetualLeaseChargedWith,
  PropertyChargedWith,
  AnnualLeaseholdChargedWith,
  LeaseholdAndBuildingChargedWith,
  BuildingChargedWith,
  Other
}

enum OwnershipChoiceType {
  MembershipRight,
  Mandeling
  Understress,
  Leasehold,
  RightToRebuild,
  FullOwnership,
  Usufruct,
  SeeDeed,
  Oppresed,
  LimitedRights,
  GroundLease,
  LeaseholdAndBuilding,
  UseAndHabitation,
  Building,
  CityMayorLaw,
  NoneOfThem,
  SharedOwnership,
  PerpetualLease,
  PerpetualSublease,
  Subleasehold,
  RightOfOverhang
}

input CadastrePlotInput {
  id: String
  notes: String,
  name: String,
  municipalCode: String,
  sectionCode: String,
  plot: String,
  indexNumber: String,
  surface: Float,
  share: String
  codeSize: CodeSizeType
  ownershipChoice: OwnershipChoiceType
  ownershipType: CadastreOwnershipType
  lease: LeaseInput
  boughtOff: BoughtOffInput
}

input UpdateCadastreInput {
  id: String!
  pimId: String!
  description: String
  mapsDescription: String
  plot: CadastrePlotInput
}

input AddCadastreInput {
  pimId: String!
  type: CadastreType!
  description: String
}

input AddCadastreMapsInput {
  pimId: String!
  maps: [NewCadastreMapInput!]!
}

type BoughtOff {
  date: Date,
  perpetually: Boolean,
  notes: String
}

input BoughtOffInput {
  date: Date,
  perpetually: Boolean,
  notes: String
}

type CadastrePlot {
  notes: String,
  name: String,
  municipalCode: String,
  sectionCode: String,
  plot: String,
  indexNumber: String,
  surface: Float,
  share: String
  codeSize: CodeSizeType
  ownershipChoice: OwnershipChoiceType
  ownershipType: CadastreOwnershipType
  lease: Lease
  boughtOff: BoughtOff
  dateCreated: Date
}

type CadastreMap {
  id: String!
  mapName: String!
  name: String
  file: File
  description: String
  dateCreated: Date
  type: String @uuidOrEnum(enum: ["CadastreMapType"])
}

type Lease {
  leaseholder: LeaseholderType
  information: LeaseInformationType
  duration: LeaseDurationType
  yearlyPrice: Float,
  endDate: Date
}

input NewCadastreMapInput {
  mapName: String!
  fileID: String!
  name: String
  description: String
  type: String @uuidOrEnum(enum: ["CadastreMapType"])
}


input LeaseInput {
  leaseholder: LeaseholderType
  information: LeaseInformationType
  duration: LeaseDurationType
  yearlyPrice: Float
  endDate: Date
}

type Cadastre implements LastUpdated {
  id: String!
  description: String
  mapsDescription: String
  type: CadastreType!
  maps: [CadastreMap!]
  plot: CadastrePlot
  dateCreated: Date
  dateUpdated: Date
  lastEditedBy: Profile
}

type PimCadastre {
  id: ID!
  cadastre: [Cadastre!]
}

type PimWithNewCadastre {
  pim: Pim
  cadastre: Cadastre
}

input CadastreMapInput {
  mapName: String
  description: String
  name: String
  type: String @uuidOrEnum(enum: ["CadastreMapType"])
}

input UpdateCadastreMapInput {
  pimId: String!
  cadastreId: String!
  mapId: String!
  map: CadastreMapInput
  fileId: String
}

extend type Query {
  getPimCadastre(id: ID!): PimCadastre! @auth
}

extend type Mutation {
  addCadastreMaps(input: AddCadastreMapsInput!): Pim @auth
  addCadastre(input: AddCadastreInput!): PimWithNewCadastre @auth
  updateCadastre(input: UpdateCadastreInput!): Pim @auth
  updateCadastreMap(input: UpdateCadastreMapInput!): Pim @auth
}
