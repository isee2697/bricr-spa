enum RealEstateType {
  Residential,
  Business
}

enum DevelopmentType {
  New,
  Existing
}

enum PimStatus {
  Prospect,
  Available,
  Option,
  Bid,
  SoldWithReservation,
  RentedWithReservation,
  Sold,
  Rented
}

enum PropertyType {
  House,
  Apartment,
  Commercial,
  Agricultural,
  ParkingLot,
  BuildingPlot,
  Other
}

enum EventEntityType {
  Pim,
}

enum EventAction {
  Created,
  Updated,
  Removed
}

enum PropertyTypeDetailed {
  SingleFamily,
  DykeHouse,
  CourtHouse,
  DriveInHome,
  SplitLevel,
  QuadrantHouse,
  PatioHouse,
  Villa,
  CanalHouse,
  WaterHouse,
  Bungalow,
  SemiBungalow,
  StiltHouse,
  BusinessOrServiceHome,
  Estate,
  CountryHouse,
  Mansion
}

enum PropertyConnection {
  SemiDetached,
  FinalHouse,
  CornerHouse,
  TerracedHouse,
  DetachedHouse
}

enum PropertyAvailability {
  InConsultation,
  Immediatelly,
  ByDate
}

enum PropertyHabitation {
  RecreationalHome,
  PermanentOccupation
}

enum SectionWithDescriptionType {
  Media
  Inspection,
  LinkedProperties,
  Services,
  PricesCosts,
  Meters
}

input PropertyRelatedInput {
  items: [PropertyRelatedItems]
  notes: String
  images: [String]
}

input GeneralInformationInput {
  qualityInformation: [QualityInformations]
  images: [String]
  notes: String
}

enum ConstructionType {
  UnderConstruction
  InDevelopment
}

input CreatePimInput {
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  propertyType: PropertyType
  attention: String
}

type Pim implements LastUpdated {
  id: ID!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  images: [File!]
  livingArea: Int
  propertyType: PropertyType
  attention: String
  completeness: Float!
  archived: Boolean!
  dateCreated: Date!
  houseGeneral: HouseGeneral
  bogGeneral: BogGeneral
  houseOutside: HouseOutside
  outsideFeatures: [OutsideFeature!]
  floors: [Floor!]
  insideGeneral: InsideGeneral
  cadastre: [Cadastre!]
  meters: [Meter!]
  services: [Service!]
  servicesDescription: String
  pictures: [Picture!]
  textChapters: [TextChapter!]
  usps: [Usp!]
  mediaLinks: [MediaLink!]
  mediaDescription: String
  tags: [Tag!]
  pricing: Pricing
  costs: [Cost!]
  lastEditedBy: Profile
  dateUpdated: Date
  investment: Investment
  specification: Specification
  specificationAdvanced: SpecificationAdvanced
  specificationDescription: String
  linkedProperties: [LinkedPim!]
  inspections: [Inspection!]
  identificationNumbers: [IdentificationNumber!]
  salesSettings: SalesSettings
  viewingMoments: [ViewingMoment!]
  location: PimLocation
  linkedPropertiesDateUpdated: Date
  linkedPropertiesLastEditedBy: Profile
  inspectionsDateUpdated: Date
  inspectionsLastEditedBy: Profile
  metersMeta: MetersMeta
  allocationCriterias: [AllocationCriteria!]
  apartmentGeneral: ApartmentGeneral
  bogSpaces: [BogSpace!]
}

type Event {
  id: String!
  entityType: EventEntityType!
  relatedEntityId: String
  action: EventAction!
  timestamp: Date!
  data: String
  userId: String
}

type PimSearchResult {
  metadata: SearchMetadata
  items: [Pim!]
}

input ListPimsFilters {
  developmentType: DevelopmentType
  status: PimStatus
  houseNumberPrefix: String
  houseNumber: String
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  street: String
  postalCode: String
  district: String
  city: String
  state: String
  county: String
  country: String
  archived: Boolean
}

input ChangesHistoryFilters {
  entityType: EventEntityType
}

input UpdateOutsideFeatureInput {
  pimId: String!
  outsideFeatureId: String!
  feature: UpdateFeatureInputConfiguration
}

input UpdateDescriptionInput {
  section: SectionWithDescriptionType!
  pimId: String!
  description: String!
  meterType: MeterType
}

scalar Dictionary

extend type Query {
  getPim(id: ID!): Pim @auth @deprecated(reason: "In later version pim will be split into multiple smaller views.")
  getPropertyTypes: [String!]!
  getChangesHistory(filters: ChangesHistoryFilters): [Event!]!
  dictionary: Dictionary
}

extend type Mutation {
  createPim(input: CreatePimInput!): Pim @auth
  removePim(id: String!): String @auth
  updateDescription(input: UpdateDescriptionInput!): String @auth
}
