input QuestionaireInput {
    templateName: String
    type: TemplateType
    isAdmin: Boolean
    published: Boolean
    copyFromId: String
    entity: EntityInput
    isActive: Boolean
}

enum TemplateDocumentType {
    Sale
    Rent
}

type TemplateSettings {
    description: String
    version: String
    language: String
    documentType: String @uuidOrEnum(enum: ["TemplateDocumentType"])
}

type TemplateSecurity {
    name: String!
    create: Boolean
    update: Boolean
    read: Boolean
    delete: Boolean
}

input TemplateSettingsInput {
    description: String
    version: String
    language: String
    documentType: String @uuidOrEnum(enum: ["TemplateDocumentType"])
}

input TemplateSecurityInput {
    name: String
    create: Boolean
    update: Boolean
    read: Boolean
    delete: Boolean
}

input TemplateGeneralInput {
    templateName: String
    settings: TemplateSettingsInput
    securities: [TemplateSecurityInput!]
}

input QuestionInput {
    order: Int
    type: QuestionType
    name: String
    required: Boolean
    commentEnabled: Boolean
    showOn: String
    options: [OptionsInput]
    entity: EntityInput
}
input GroupsInput {
    groupName: String
    order: Int
    entity: EntityInput
}

input AnswersInput {
    templateId: String
    date: Date
    entities: [EntityInput]
}

input OptionsInput {
    name: String
}

input AnswerInput {
    options: [OptionsInput]
    comment: String
}

input EntityInput {
    type: String
    subType: String
}

type TemplateMeta {
    createdAt: Date!
    deletedAt: Date
}

type Questionaire {
     id: ID! 
    companyId: String
    type: TemplateType
    templateName: String
    isAdmin: Boolean
    published: Boolean
    copyFromId: String
    entity: Entity
    isActive: Boolean
    meta: TemplateMeta!
    settings: TemplateSettings
    securities: [TemplateSecurity!]
    labels: [String!]
    tags: [TemplatTag!]
}

type TemplatTag {
   name: String!
   amount: Int
}

type Groups {
    id: ID!
    templateId: String
    groupName: String
    copyFromId: String
    order: Int
    entity: Entity
}

type Question {
    id: ID!
    groupId: String
    order: Int
    type: QuestionType
    name: String
    required: Boolean
    commentEnabled: Boolean
    showOn: String
    options: [Options]
    entity: Entity
}

type Answers {
    id: ID!
    templateId: String
    date: Date
    entities: [Entity]
}

type Answer {
    id: ID!
    answersId: String
    questionId: String
    options: [Options]
    comment: String
}

type Options {
    name: String
}

enum QuestionType {
    text
    radio
    checkbox
    multiplechoice
    number
    email
    price
    singlelinetext
    multiplelinetext
}

enum TemplateType {
    questionnaire
    contract
    lvz
    survey
    newsletter
    print
    socialMedia
    invoice
    email
}

type Entity {
    type: String
    subType: String
}



extend type Mutation {
    createQuestionaire(input: QuestionaireInput!): Questionaire  @auth
    updateTemplateGeneral(input: TemplateGeneralInput!): Questionaire  @auth
}

extend type Query {
    getQuestionaires(pagination: Pagination, search: String, type: String): [Questionaire!] @auth
    getQuestionaire(id: ID!): Questionaire @auth
}