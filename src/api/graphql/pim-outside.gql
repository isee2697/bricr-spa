enum QualityInformations {
  Simple,
  Normal,
  Luxury,
  Excellent,
  GoodToStickOut,
  Good,
  ReasonableToGood,
  Fair,
  ModerateToFairRedelijik,
  Moderate,
  BadToModerate,
  Bad
}

enum RoofTypes {
  TransverseRoof,
  ClassRoof,
  MansardRoof,
  FlatRoof,
  HippedRoof,
  TentRoof,
  SaddleRoof,
  CompositeRoof
}

enum RoofMaterials {
  Asbestos,
  BituminousRoofing,
  Plastic,
  Slate,
  Metal,
  Pans,
  Other
}

enum RoofInsulations {
  SprayFoam,
  RigidBoards,
  BlanketOrMatting,
  GlassRock,
  MineralWool,
  LooseFill,
  StructuralPanels
}

enum PropertyRelatedItems {
  Balcony,
  Terrace,
  RoofTerrace,
  Porch
}

enum OutsideFeatureType {
  Garden,
  Garage,
  Storage,
  Terrain,
  ParkingLot
}

enum GardenType {
  Backyard,
  PatioOrAtrium,
  Place,
  AllGroundGarden,
  FrontGarden,
  SunTerrace,
  BackGarden
}

enum GardenQualityType {
  ToBeConstructed,
  BeautifullyConstructed,
  Normal,
  Neglected,
  TakenCareOf
}

enum GardenShapeType {
  Square,
  Rectangle,
  LShape,
  UShape,
  TShape
}

enum Location {
  North,
  South,
  East,
  West
}

enum GarageType {
  NoGarage,
  AttachmentWood,
  AttachmentStone,
  Carport,
  GarageWithCarport,
  GaragePossible,
  GarageBox,
  Indoor,
  ParkingBasement,
  ParkingSpace,
  Basement,
  FreestandingWood,
  FreestandingStone
}

enum GarageAndStorageMaterial {
  Stone,
  Wood,
  Plastic,
  Metal,
  Other
}

enum GarageInsulation {
  RoofInsulation,
  DoubleGlazing,
  EcoConstruction,
  NoCavity,
  PartlyDoubleGlazing,
  WallInsulation,
  FloorInsulation,
  FullyInsulated
}

enum GarageService {
  ElectricDoor,
  Loft,
  Electricity,
  HeatingWater
}

enum StorageType {
  StorageBox,
  Shed,
  TeaHouse,
  WithAttic
}

enum StorageInsulation {
  NoInsulation,
  RoofInsulation,
  DoubleGlazing,
  EcoConstruction,
  NoCavity,
  PartlyDoubleGlazing,
  WallInsulation,
  FloorInsulation,
  FullyInsulated
}

enum StorageService {
  WithElectricDoor,
  WithLoft,
  EquippedWithElectricity,
  ProvidedWithHeating,
  ProvidedWithWater
}

enum TerrainParking {
  PaidParking,
  PublicParking,
  ParkingGarage,
  ParkingPermits
}

enum FoundationType {
  IsolatedFooting,
  CombinedFooting,
  WallFooting,
  SpreadLooting,
  RaftOrMatFoundations,
  PileFoundations,
  DrilledShafts
}

enum FoundationMaterialType {
  Concrete,
  Timber,
  Steel,
  Plastic
}

enum GutterType {
  HalfRound,
  Flatbottom,
  NoGutter
}

enum GutterMaterial {
  Vinyl,
  Stainless,
  Aluminium,
  Copper,
  Zinc,
  Steel
}

input RoofInformationInput {
  type: RoofTypeInput
  material: RoofMaterialInput
  insulation: RoofInsulationInput
  gutter: GutterInformationsInput
  gutterMaterial: GutterMaterialInformationsInput
  images: [String]
  yearOfRoof: Int
}

input RoofTypeInput {
  name: RoofTypes
  notes: String
}

input RoofMaterialInput {
  name: RoofMaterials,
  notes: String
}

input GutterMaterialInformationsInput {
  material: GutterMaterial
  notes: String
}

type GutterMaterialInformations {
  material: GutterMaterial
  notes: String
}

input GutterInformationsInput {
  type: GutterType
  notes: String
}

type GutterInformations {
  type: GutterType
  notes: String
}

input RoofInsulationInput {
  name: RoofInsulations
  notes: String
}

type GeneralInformation {
  qualityInformation: [QualityInformations]
  images: [File!]
  notes: String
}

type PropertyRelated {
  items: [PropertyRelatedItems]
  notes: String
  images: [File!]
}

type RoofType {
  name: RoofTypes
  notes: String
}

type RoofMaterial {
  name: RoofMaterials,
  notes: String
}

type RoofInsulation {
  name: RoofInsulations
  notes: String
}

type RoofInformation {
  type: RoofType
  material: RoofMaterial
  insulation: RoofInsulation
  images: [File!]
  yearOfRoof: Int
  gutter: GutterInformations
  gutterMaterial: GutterMaterialInformations
}

input FoundationTypeInformationsInput {
  type: FoundationType
  notes: String
}

type FoundationTypeInformations {
  type: FoundationType
  notes: String
}

input FoundationMaterialInformationsInput {
  type: [FoundationMaterialType!]
  notes: String
}

type FoundationMaterialInformations {
  type: [FoundationMaterialType!]
  notes: String
}

input FoundationInput {
  type: FoundationTypeInformationsInput
  material: FoundationMaterialInformationsInput
}

type Foundation {
  type: FoundationTypeInformations
  material: FoundationMaterialInformations
}

input HouseOutsideInput {
  generalInformation: GeneralInformationInput
  foundation: FoundationInput
  propertyRelated: PropertyRelatedInput
  roofInformation: RoofInformationInput
  notes: String
}

type HouseOutside {
  generalInformation: GeneralInformation
  foundation: Foundation
  propertyRelated: PropertyRelated
  roofInformation: RoofInformation
  notes: String
}

type GardenFeature {
  main: Boolean
  type: GardenType
  notes: String
  quality: GardenQualityType
  location: [Location]
  shape: GardenShapeType
  measurement: RectangleMeasurement
  images: [File!]
}

type GarageFeature {
  main: Boolean
  types: [GarageType]
  attached: Boolean
  attic: Boolean
  insulations: [GarageInsulation]
  services: [GarageService]
  secondaryWindows: Boolean
  materials: [GarageAndStorageMaterial]
  measurement: CuboidMeasurement
  notes: String
  images: [File!]
}

type StorageFeature {
  main: Boolean
  attached: Boolean
  types: [StorageType]
  materials: [GarageAndStorageMaterial]
  insulations: [StorageInsulation]
  services: [StorageService]
  secondaryWindows: Boolean
  measurement: CuboidMeasurement
  notes: String
  images: [File!]
}

type TerrainFeature {
  parking: TerrainParking
  measurement: RectangleMeasurement
  notes: String
  images: [File!]
}

type ParkingLotFeature {
  number: Float
  price: Float,
  cost: Float,
  notes: String
  images: [File!]
}



union OutsideFeatureConfiguration = GardenFeature | GarageFeature | StorageFeature | TerrainFeature | ParkingLotFeature

type OutsideFeature implements LastUpdated{
  id: String!
  description: String
  type: OutsideFeatureType!
  configuration: OutsideFeatureConfiguration
  dateCreated: Date
  dateUpdated: Date
  lastEditedBy: LastUpdatedProfile
}

type PimOutside implements LastUpdated {
  id: ID!
  houseOutside: HouseOutside
  outsideFeatures: [OutsideFeature!]
  dateUpdated: Date
  lastEditedBy: LastUpdatedProfile
}

input PimOutsideInput {
  id: ID!
  houseOutside: HouseOutsideInput
}

scalar UpdateFeatureInputConfiguration

input AddOutsideFeatureInput {
  pimId: String!
  type: OutsideFeatureType!
  description: String
}

type PimWithNewOutside {
   pim: Pim!
   newOutsideFeature: OutsideFeature!
}

extend type Query {
  getPimOutside(id: ID!): PimOutside!
}

extend type Mutation {
  updatePimOutsideInfo(input: PimOutsideInput!): Pim! @auth
  addOutsideFeature(input: AddOutsideFeatureInput!): PimWithNewOutside! @auth
  updateOutsideFeature(input: UpdateFeatureInputConfiguration!): Pim! @auth
}
