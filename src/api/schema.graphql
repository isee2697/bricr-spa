# REST - don't remove

input LoginInput {
  username: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

input ForgotPasswordInput {
  username: String!
}

type ForgotPasswordResponse {
  error: String
  stack: String
}

input ResetPasswordInput {
  newPassword: String!
}

type ResetPasswordResponse {
  error: String
  stack: String
}

# END REST

directive @auth on FIELD_DEFINITION

type Profile {
  id: String!
  firstName: String
  lastName: String
  email: String
  avatar: String
  teams: [ProfileTeam!]
}

type ProfileTeam {
  id: String!
  name: String
}

type SearchMetadata {
  total: Int!
}

enum SortDirection {
  asc
  desc
}

input Sort {
  column: String!
  direction: SortDirection!
}

scalar Date

type Company {
  id: String!
  teams: [Team!]
  name: String
}

type Team{
  id: String!
  members: [Profile!]
  company: Company!
  name: String
}

enum RealEstateType {
  Residential,
  Business,
}

enum DevelopmentType {
  New,
  Existing,
}

enum PimStatus {
  Prospect,
  Available,
  Option,
  Bid,
  SoldWithReservation,
  RentedWithReservation,
  Sold,
  Rented,
} 

enum PropertyType {
  House,
  Apartment,
  Commercial,
  Agricultural,
  ParkingLot,
  BuildingPlot,
  Other,
}

enum PropertyTypeDetailed {
  SingleFamily,
  DykeHouse,
  CourtHouse,
  DriveInHome,
  SplitLevel,
  QuadrantHouse,
  PatioHouse,
  Villa,
  CanalHouse,
  WaterHouse,
  Bungalow,
  SemiBungalow,
  StiltHouse,
  BusinessOrServiceHome,
  Estate,
  CountryHouse,
  Mansion
}

enum PropertyConnection {
  SemiDetached,
  FinalHouse,
  CornerHouse,
  TerracedHouse,
  DetachedHouse
}

enum PropertyAvailability {
  InConsultation,
  Immediatelly,
  ByDate
}

enum PropertyHabitation {
  RecreationalHome,
  PermanentOccupation
}

enum PropertySpaces {
  Kitchen
}

enum SpaceShape {
  Rectangle,
  Square,
  LType,
  TType,
  UType,
  ZType
}

enum SpacemMeasurement {
  Length,
  Width,
  Height,
  Surface,
  Volume
}

enum SpaceServiceHeating {
  GeothermalHeat,
  NoHeating,
  Fireplace,
  MultiBurner,
  HotAirHeating,
  PelletStove,
  ElectricHeating,
  DistrictHeating,
  GasFireplace,
  CoalStove,
  WallHeating,
  HeatPump,
  MotherFireplace,
  GasHeaters,
  BlockHeatingWoodStove,
  CentralHeatingBoiler,
  UnderfloorHeatingEntirely,
  PossibilityForFireplaceHeat,
  UnderfloorHeatingPartly,
  RecoveryInstalation
}

enum KitchenType {
  MainKitchen,
  Scullery
}

enum KitchenConstruction {
  DenseKitchen,
  EatInKitchen,
  HalfOpenKitchen,
  OpenKitchen
}

enum KitchenServices {
  KitchenIsland,
  WashIsland
}

enum KitchenAppliances {
  Refrigerator,
  Microwave,
  Dishwasher,
  Oven,
  Stove
}

enum KitchenHob {
  GasHob,
  InductionHob,
  ElectricHob,
  CeramicHob,
  HalogenHob
}

enum FloorType {
  Attic,
  Floor,
  Basement,
  GroundFloor,
  Loft,
}

enum SpaceType {
  Kitchen,
  Bathroom,
  LivingRoom,
  Bedroom,
  HomeOffice,
  Other,
}

type KitchenSpace {
  constructionYear: Float
  notes: String,
  type: KitchenType,
  constructionType: KitchenConstruction,
  services: KitchenServices,
  appliances: [KitchenAppliances],
  hob: KitchenHob,
  shape: SpaceShape,
  measurement: SpacemMeasurement,
  serviceHeating: SpaceServiceHeating,
  images: [String]
}

type HouseGeneral  {
  availability: PropertyAvailabilityInformation
  construction: ConstructionInformation
  floor: FloorType
  propertyConnection: PropertyConnection
  propertyDetails: PropertyTypeDetailed
}
input HouseGeneralInput {
  id: String!
  availability: PropertyAvailabilityInformationInput
  construction: ConstructionInformationInput
  floor: FloorType
  propertyConnection: PropertyConnection
  propertyDetails: PropertyTypeDetailed
  street: String!
  city: String!
  houseNumber: String!
  postalCode: String!
}

enum ConstructionType {
  UnderConstruction
  InDevelopment
}

type ConstructionInformation {
  type: ConstructionType
  from: Date
  to: Date
  notes: String
}


input ConstructionInformationInput {
  type: ConstructionType
  from: Date
  to: Date
  notes: String
}

type PropertyAvailabilityInformation {
  availability: PropertyAvailability
  from: Date
  notes: String
  habitation: PropertyHabitation
  currentUse: String
  currentDestination: String
}

input PropertyAvailabilityInformationInput {
  availability: PropertyAvailability
  from: Date
  notes: String
  habitation: PropertyHabitation
  currentUse: String
  currentDestination: String
}

input CreatePimInput {
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  propertyType: PropertyType
  attention: String
}

input UpdatePimInput {
  id: String!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  propertyType: PropertyType
  attention: String
}

union PimGeneral = HouseGeneral

input PimGeneralInput {
  id: String!
  availability: PropertyAvailabilityInformationInput
  construction: ConstructionInformationInput
  floor: FloorType
  propertyConnection: PropertyConnection
  propertyDetails: PropertyTypeDetailed
  street: String!
  city: String!
  houseNumber: String!
  postalCode: String!
}

type Pim {
  id: String!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  images: [String!]
  livingArea: Int
  propertyType: PropertyType
  attention: String
  completeness: Float!
  archived: Boolean!
  dateCreated: Date!
  houseGeneral: HouseGeneral
  floors: [Floor!]
}

type Space {
  id: String!
  spaceType: SpaceType!
  extraRoomPossibility: Boolean!
}

type Floor {
  id: String!
  level: Int!
  floorType: FloorType!
  spaces: [Space!]
}

type PimSearchResult {
  metadata: SearchMetadata
  items: [Pim!]
}

input Pagination {
  from: Int
  limit: Int
  searchAfter: [String!]
}

input ListPimsFilters {
  developmentType: DevelopmentType
  status: PimStatus
  houseNumberPrefix: String
  houseNumber: String
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  street: String
  postalCode: String
  district: String
  city: String
  state: String
  county: String
  country: String
  archived: Boolean
}

input AddNewFloorInput {
  pimId: String!
  floorType: FloorType!
}

input AddSpaceInput {
  spaceType: SpaceType!
  extraRoomPossibility: Boolean!
  pimId: String!
  floorId: String!
}

type Query {
  me: Profile @auth
  getProfile(id: ID!): Profile @auth
  listPims(filters: ListPimsFilters, pagination: Pagination, sort: [Sort!]): PimSearchResult! @auth
  getPim(id: ID!): Pim @auth
  getPropertyTypes: [String!]!
}

type Mutation {
  #REST don't remove
  login(input: LoginInput): LoginResponse
  forgotPassword(input: ForgotPasswordInput): ForgotPasswordResponse
  resetPassword(input: ResetPasswordInput, token: String!): ResetPasswordResponse
  #END REST
  deleteUser(id: String): String @auth
  createPim(input: CreatePimInput!): String @auth
  updatePim(input: UpdatePimInput!): String @auth
  updatePimGeneralInfo(input: PimGeneralInput!): String @auth
  removePim(id: String!): String @auth
  addFloorToPim(input: AddNewFloorInput!): String @auth
  addSpaceToFloor(input: AddSpaceInput!): String @auth
}
