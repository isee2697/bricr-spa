# REST - don't remove

input LoginInput {
  username: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

input ForgotPasswordInput {
  username: String!
}

type ForgotPasswordResponse {
  error: String
  stack: String
}

input ResetPasswordInput {
  newPassword: String!
}

type ResetPasswordResponse {
  error: String
  stack: String
}

# END REST

directive @auth on FIELD_DEFINITION

type Profile {
  id: String!
  firstName: String
  lastName: String
  email: String
  avatar: String
  teams: [ProfileTeam!]
}

type ProfileTeam {
  id: String!
  name: String
}

type SearchMetadata {
  total: Int!
}

enum SortDirection {
  asc
  desc
}

input Sort {
  column: String!
  direction: SortDirection!
}

scalar Date

type Company {
  id: String!
  teams: [Team!]
  name: String
}

type Team{
  id: String!
  members: [Profile!]
  company: Company!
  name: String
}

enum RealEstateType {
  Residential,
  Business,
}

enum DevelopmentType {
  New,
  Existing,
}

enum PimStatus {
  Prospect,
  Available,
  Option,
  Bid,
  SoldWithReservation,
  RentedWithReservation,
  Sold,
  Rented,
} 

enum PropertyType {
  House,
  Apartment,
  Commercial,
  Agricultural,
  ParkingLot,
  BuildingPlot,
  Other,
}

input CreatePimInput {
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  propertyType: PropertyType
  attention: String
}

input UpdatePimInput {
  id: String!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  propertyType: PropertyType
  attention: String
}

type Pim {
  id: String!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  images: [String!]
  livingArea: Int
  propertyType: PropertyType
  attention: String
  completeness: Float!
  archived: Boolean!
  dateCreated: Date!
}

type PimSearchResult {
  metadata: SearchMetadata
  items: [Pim!]
}

input Pagination {
  from: Int
  limit: Int
  searchAfter: [String!]
}

input ListPimsFilters {
  developmentType: DevelopmentType
  status: PimStatus
  houseNumberPrefix: String
  houseNumber: String
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  street: String
  postalCode: String
  district: String
  city: String
  state: String
  county: String
  country: String
  archived: Boolean
}

type Query {
  me: Profile @auth
  getProfile(id: ID!): Profile @auth
  listPims(filters: ListPimsFilters, pagination: Pagination, sort: [Sort!]): PimSearchResult! @auth
  getPim(id: ID!): Pim @auth
  getPropertyTypes: [String!]!
}

type Mutation {
  #REST don't remove
  login(input: LoginInput): LoginResponse
  forgotPassword(input: ForgotPasswordInput): ForgotPasswordResponse
  resetPassword(input: ResetPasswordInput, token: String!): ResetPasswordResponse
  #END REST
  deleteUser(id: String): String @auth
  createPim(input: CreatePimInput!): String @auth
  updatePim(input: UpdatePimInput!): String @auth
  removePim(id: String!): String @auth
}