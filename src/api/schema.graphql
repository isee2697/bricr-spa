# REST - don't remove

input LoginInput {
  username: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

input ForgotPasswordInput {
  username: String!
}

type ForgotPasswordResponse {
  error: String
  stack: String
}

input ResetPasswordInput {
  newPassword: String!
}

type ResetPasswordResponse {
  error: String
  stack: String
}

# END REST

directive @auth on FIELD_DEFINITION
directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
input AddFilesInput {
  fileIDs: [ID!]!
  entity: EntityWithFiles!
  entityID: ID!
}

input AddNewFloorInput {
  pimId: String!
  floorDescription: String
  floorType: FloorType!
}

input AddOutsideFeatureInput {
  pimId: String!
  type: OutsideFeatureType!
  description: String
}

input AddSpaceInput {
  spaceType: SpaceType!
  extraRoomPossibility: Boolean!
  pimId: String!
  floorId: String!
  spaceName: String
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

input ChangesHistoryFilters {
  entityType: EventEntityType
}

type Company {
  id: String!
  teams: [Team!]
  name: String
}

type ConstructionInformation {
  type: ConstructionType
  from: Date
  to: Date
  notes: String
}

input ConstructionInformationInput {
  type: ConstructionType
  from: Date
  to: Date
  notes: String
}

enum ConstructionType {
  UnderConstruction
  InDevelopment
}

input CreateFileInput {
  fileName: String!
  fileType: String!
  permission: FilePermission!
  description: String
}

input CreatePimInput {
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  livingArea: Int
  propertyType: PropertyType
  attention: String
}

scalar Date

enum DevelopmentType {
  New
  Existing
}

scalar Dictionary

enum EntityWithFiles {
  Pim
  Space
}

type Event {
  id: String!
  entityType: EventEntityType!
  relatedEntityId: String
  action: EventAction!
  timestamp: Date!
  data: String
  userId: String
}

enum EventAction {
  Created
  Updated
  Removed
}

enum EventEntityType {
  Pim
}

type File {
  id: ID!
  fileName: String!
  description: String
  status: Int!
  fileType: String!
  permission: FilePermission!
  key: ID!
  createdAt: Date
  signedUrl: String
  url: String
  bucket: String
}

enum FilePermission {
  public
  private
}

type Floor {
  id: String!
  floorDescription: String
  level: Int!
  floorType: FloorType!
  spaces: [Space!]
}

enum FloorType {
  Attic
  Floor
  Basement
  GroundFloor
  Loft
}

union GardenDimensions = RectangleDimensions
type GardenFeature {
  mainGarden: Boolean
  type: GardenType
  notes: String
  quality: GardenQualityType
  location: [Location]
  shape: GardenShapeType
  dimensions: GardenDimensions
  surface: Float
  pictures: [String]
}

enum GardenQualityType {
  ToBeConstructed
  BeautifullyConstructed
  Normal
  Neglected
  TakenCareOf
}

enum GardenShapeType {
  Square
  Rectangle
  LShape
  UShape
  TShape
}

enum GardenType {
  Backyard
  PatioOrAtrium
  Place
  AllGroundGarden
  FrontGarden
  SunTerrace
  BackGarden
}

type GeneralInformation {
  qualityInformation: [QualityInformations]
  pictures: [String]
  notes: String
}

input GeneralInformationInput {
  qualityInformation: [QualityInformations]
  pictures: [String]
  notes: String
}

type HouseGeneral {
  availability: PropertyAvailabilityInformation
  construction: ConstructionInformation
  floor: FloorType
  propertyConnection: PropertyConnection
  propertyDetails: PropertyTypeDetailed
}

input HouseGeneralInput {
  id: ID!
  availability: PropertyAvailabilityInformationInput
  construction: ConstructionInformationInput
  floor: FloorType
  propertyConnection: PropertyConnection
  propertyDetails: PropertyTypeDetailed
  street: String!
  city: String!
  houseNumber: String!
  postalCode: String!
}

type HouseOutside {
  generalInformation: GeneralInformation
  propertyRelated: PropertyRelated
  roofInformation: RoofInformation
  notes: String
}

input HouseOutsideInput {
  id: ID!
  generalInformation: GeneralInformationInput
  propertyRelated: PropertyRelatedInput
  roofInformation: RoofInformationInput
  notes: String
}

type KitchenAppliance {
  name: KitchenAppliances!
  quantity: Int!
  notes: String
}

enum KitchenAppliances {
  Refrigerator
  Microwave
  Dishwasher
  Oven
  Stove
}

enum KitchenConstruction {
  ClosedKitchen
  EatInKitchen
  HalfOpenKitchen
  OpenKitchen
}

enum KitchenHob {
  GasHob
  InductionHob
  ElectricHob
  CeramicHob
  HalogenHob
}

enum KitchenServices {
  KitchenIsland
  WashIsland
}

type KitchenSpace {
  constructionYear: Float
  notes: String
  type: KitchenType
  constructionType: KitchenConstruction
  services: [KitchenServices]
  servicesNotes: String
  appliances: [KitchenAppliance]
  hob: KitchenHob
  shape: SpaceShape
  measurement: SpaceMeasurement
  serviceHeating: [SpaceServiceHeating]
  images: [File!]
}

enum KitchenType {
  MainKitchen
  Scullery
}

input ListPimsFilters {
  developmentType: DevelopmentType
  status: PimStatus
  houseNumberPrefix: String
  houseNumber: String
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  street: String
  postalCode: String
  district: String
  city: String
  state: String
  county: String
  country: String
  archived: Boolean
}

enum Location {
  North
  South
  East
  West
}

type OutsideFeature {
  id: String!
  description: String
  type: OutsideFeatureType!
  configuration: OutsideFeatureConfiguration
}

union OutsideFeatureConfiguration = GardenFeature
enum OutsideFeatureType {
  Garden
  Garage
  Storage
  Terrain
  ParkingLot
}

input Pagination {
  from: Int
  limit: Int
  searchAfter: [String!]
}

type Pim {
  id: String!
  realEstateType: RealEstateType!
  street: String!
  houseNumberPrefix: String
  houseNumber: String!
  houseNumberAddition: String
  constructionNumberPrefix: String
  constructionNumber: String
  constructionNumberAddition: String
  postalCode: String!
  district: String
  city: String!
  state: String
  county: String
  country: String!
  developmentType: DevelopmentType!
  status: PimStatus!
  salePrice: Float
  rentPrice: Float
  description: String
  images: [File!]
  livingArea: Int
  propertyType: PropertyType
  attention: String
  completeness: Float!
  archived: Boolean!
  dateCreated: Date!
  houseGeneral: HouseGeneral
  houseOutside: HouseOutside
  floors: [Floor!]
  outsideFeatures: [OutsideFeature!]
}

union PimGeneral = HouseGeneral
scalar PimGeneralInput

union PimOutside = HouseOutside
scalar PimOutsideInput

type PimSearchResult {
  metadata: SearchMetadata
  items: [Pim!]
}

enum PimStatus {
  Prospect
  Available
  Option
  Bid
  SoldWithReservation
  RentedWithReservation
  Sold
  Rented
}

type Profile {
  id: String!
  firstName: String
  lastName: String
  email: String
  avatar: String
  teams: [ProfileTeam!]
}

type ProfileTeam {
  id: String!
  name: String
}

enum PropertyAvailability {
  InConsultation
  Immediatelly
  ByDate
}

type PropertyAvailabilityInformation {
  availability: PropertyAvailability
  from: Date
  notes: String
  habitation: PropertyHabitation
  currentUse: String
  currentDestination: String
}

input PropertyAvailabilityInformationInput {
  availability: PropertyAvailability
  from: Date
  notes: String
  habitation: PropertyHabitation
  currentUse: String
  currentDestination: String
}

enum PropertyConnection {
  SemiDetached
  FinalHouse
  CornerHouse
  TerracedHouse
  DetachedHouse
}

enum PropertyHabitation {
  RecreationalHome
  PermanentOccupation
}

type PropertyRelated {
  items: [PropertyRelatedItems]
  notes: String
  pictures: [String]
}

input PropertyRelatedInput {
  items: [PropertyRelatedItems]
  notes: String
  pictures: [String]
}

enum PropertyRelatedItems {
  Balcony
  Terrace
  RoofTerrace
  Porch
}

enum PropertySpaces {
  Kitchen
}

enum PropertyType {
  House
  Apartment
  Commercial
  Agricultural
  ParkingLot
  BuildingPlot
  Other
}

enum PropertyTypeDetailed {
  SingleFamily
  DykeHouse
  CourtHouse
  DriveInHome
  SplitLevel
  QuadrantHouse
  PatioHouse
  Villa
  CanalHouse
  WaterHouse
  Bungalow
  SemiBungalow
  StiltHouse
  BusinessOrServiceHome
  Estate
  CountryHouse
  Mansion
}

enum QualityInformations {
  Simple
  Normal
  Luxury
  Excellent
  GoodToStickOut
  Good
  ReasonableToGood
  Fair
  ModerateToFairRedelijik
  Moderate
  BadToModerate
  Bad
}

enum RealEstateType {
  Residential
  Business
}

type RectangleDimensions {
  length: Float
  height: Float
}

type RoofInformation {
  type: RoofType
  material: RoofMaterial
  insulation: RoofInsulation
  pictures: [String]
}

input RoofInformationInput {
  type: RoofTypeInput
  material: RoofMaterialInput
  insulation: RoofInsulationInput
  pictures: [String]
}

type RoofInsulation {
  name: RoofInsulations
  notes: String
}

input RoofInsulationInput {
  name: RoofInsulations
  notes: String
}

enum RoofInsulations {
  SprayFoam
  RigidBoards
  BlanketOrMatting
  GlassRock
  MineralWool
  LooseFill
  StructuralPanels
}

type RoofMaterial {
  name: RoofMaterials
  notes: String
}

input RoofMaterialInput {
  name: RoofMaterials
  notes: String
}

enum RoofMaterials {
  Asbestos
  BituminousRoofing
  Plastic
  Slate
  Metal
  Pans
  Other
}

type RoofType {
  name: RoofTypes
  notes: String
}

input RoofTypeInput {
  name: RoofTypes
  notes: String
}

enum RoofTypes {
  TransverseRoof
  ClassRoof
  MansardRoof
  FlatRoof
  HippedRoof
  TentRoof
  SaddleRoof
  CompositeRoof
}

type SearchMetadata {
  total: Int!
}

input Sort {
  column: String!
  direction: SortDirection!
}

enum SortDirection {
  asc
  desc
}

type Space {
  id: String!
  spaceType: SpaceType!
  spaceName: String
  extraRoomPossibility: Boolean!
  configuration: SpaceConfiguration
}

union SpaceConfiguration = KitchenSpace
type SpaceMeasurement {
  length: Float
  width: Float
  height: Float
  surface: Float
  volume: Float
}

enum SpaceServiceHeating {
  GeothermalHeat
  NoHeating
  Fireplace
  MultiBurner
  HotAirHeating
  PelletStove
  ElectricHeating
  DistrictHeating
  GasFireplace
  CoalStove
  WallHeating
  HeatPump
  MotherFireplace
  GasHeaters
  BlockHeatingWoodStove
  CentralHeatingBoiler
  UnderfloorHeatingEntirely
  PossibilityForFireplaceHeat
  UnderfloorHeatingPartly
  RecoveryInstalation
}

enum SpaceShape {
  Rectangle
  Square
  LType
  TType
  UType
  ZType
}

enum SpaceType {
  Kitchen
  Bathroom
  LivingRoom
  Bedroom
  HomeOffice
  Other
}

type Subscription {
  _: Boolean
}

type Team {
  id: String!
  members: [Profile!]
  company: Company!
  name: String
}

scalar UpdateFeatureInputConfiguration

input UpdateFloorInput {
  pimId: String!
  floorId: String!
  floorDescription: String
  floorType: FloorType
}

input UpdateOutsideFeatureInput {
  pimId: String!
  outsideFeatureId: String!
  feature: UpdateFeatureInputConfiguration
}

input UpdateSpaceInput {
  pimId: String!
  spaceId: String!
  spaceName: String
  space: UpdateSpaceInputConfiguration
}

scalar UpdateSpaceInputConfiguration

scalar Upload

type Query {
  me: Profile @auth
  getProfile(id: ID!): Profile @auth
  listPims(filters: ListPimsFilters, pagination: Pagination, sort: [Sort!]): PimSearchResult! @auth
  getPim(id: ID!): Pim @auth
  getPropertyTypes: [String!]!
  getChangesHistory(filters: ChangesHistoryFilters): [Event!]!
  dictionary: Dictionary
}

type Mutation {
  #REST don't remove
  login(input: LoginInput): LoginResponse
  forgotPassword(input: ForgotPasswordInput): ForgotPasswordResponse
  resetPassword(input: ResetPasswordInput, token: String!): ResetPasswordResponse
  #END REST
  deleteUser(id: String): String @auth
  createPim(input: CreatePimInput!): Pim @auth
  removePim(id: String!): String @auth
  updatePimGeneralInfo(input: PimGeneralInput!): Pim @auth
  updatePimOutsideInfo(input: PimOutsideInput!): Pim @auth
  addFloorToPim(input: AddNewFloorInput!): Pim @auth
  addSpaceToFloor(input: AddSpaceInput!): Pim @auth
  updateSpace(input: UpdateSpaceInput!): Pim @auth
  updateFloor(input: UpdateFloorInput!): Pim @auth
  addOutsideFeature(input: AddOutsideFeatureInput!): Pim @auth
  updateOutsideFeature(input: UpdateFeatureInputConfiguration!): Pim @auth
  addFiles(input: AddFilesInput!): [File!]! @auth
}
